/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/audio/AudioProcessor.js":
/*!*********************************************!*\
  !*** ./src/scripts/audio/AudioProcessor.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioProcessor: () => (/* binding */ AudioProcessor)\n/* harmony export */ });\n/* harmony import */ var _InitializedState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InitializedState.js */ \"./src/scripts/audio/InitializedState.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\nvar AudioProcessor = /*#__PURE__*/function () {\n  function AudioProcessor() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, AudioProcessor);\n    // limit to one instance for whole scope\n    if (AudioProcessor.instance) {\n      return AudioProcessor.instance;\n    }\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 2048;\n    this.analyser.smoothingTimeConstant = 0.8;\n    this.bufferLength = this.analyser.frequencyBinCount;\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.state = new _InitializedState_js__WEBPACK_IMPORTED_MODULE_0__.InitializedState(this.audioContext, this.analyser);\n    this.isActive = false;\n    this.isPlaying = true;\n    this.source = null;\n    this.startTime = null;\n    this.debugMode = options.debugMode || false;\n    AudioProcessor.instance = this;\n  }\n  return _createClass(AudioProcessor, [{\n    key: \"play\",\n    value: function () {\n      var _play = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.isPlaying = true;\n              this.audioContext.resume();\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function play() {\n        return _play.apply(this, arguments);\n      }\n      return play;\n    }()\n  }, {\n    key: \"pause\",\n    value: function () {\n      var _pause = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.isPlaying = false;\n              this.audioContext.suspend();\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function pause() {\n        return _pause.apply(this, arguments);\n      }\n      return pause;\n    }()\n  }, {\n    key: \"initMicrophone\",\n    value: function () {\n      var _initMicrophone = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.isActive) {\n                _context3.next = 9;\n                break;\n              }\n              _context3.next = 3;\n              return this.state.initMicrophone();\n            case 3:\n              this.state = _context3.sent;\n              this.isActive = true;\n              this.audioContext.resume();\n              if (this.debugMode) {\n                console.log('initMicrophone');\n              }\n              _context3.next = 10;\n              break;\n            case 9:\n              if (this.debugMode) {\n                console.log('already active');\n              }\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function initMicrophone() {\n        return _initMicrophone.apply(this, arguments);\n      }\n      return initMicrophone;\n    }()\n  }, {\n    key: \"initFile\",\n    value: function () {\n      var _initFile = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(file) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this.isActive) {\n                _context4.next = 9;\n                break;\n              }\n              _context4.next = 3;\n              return this.state.initFile(file);\n            case 3:\n              this.state = _context4.sent;\n              this.isActive = true;\n              this.audioContext.resume();\n              if (this.debugMode) {\n                console.log('initFile:', file.name);\n              }\n              _context4.next = 10;\n              break;\n            case 9:\n              if (this.debugMode) {\n                console.log('already active');\n              }\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function initFile(_x) {\n        return _initFile.apply(this, arguments);\n      }\n      return initFile;\n    }()\n  }, {\n    key: \"initMockData\",\n    value: function initMockData() {\n      if (!this.isActive) {\n        this.state = this.state.initMockData();\n        this.isActive = true;\n        this.audioContext.resume();\n        if (this.debugMode) {\n          console.log('initMockData');\n        }\n      } else {\n        if (this.debugMode) {\n          console.log('already active');\n        }\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.isActive) {\n        this.state = this.state.stop();\n        this.isActive = false;\n        if (this.debugMode) {\n          console.log('Audio processing stopped');\n        }\n      } else {\n        if (this.debugMode) {\n          console.log('already inactive');\n        }\n      }\n    }\n\n    /**\r\n     * Set debug mode for the audio processor\r\n     * Controls logging, analyzer settings, and processing behavior\r\n     * \r\n     * @param {boolean} enabled - Whether debug mode should be enabled\r\n     */\n  }, {\n    key: \"setDebugMode\",\n    value: function setDebugMode(enabled) {\n      // Store the previous value to detect changes\n      var previousMode = this.debugMode;\n\n      // Update the flag\n      this.debugMode = enabled;\n\n      // If this is a mode change, log it\n      if (previousMode !== enabled) {\n        console.log(\"Debug mode \".concat(enabled ? 'enabled' : 'disabled'));\n\n        // Adjust analyzer settings for debug mode\n        if (enabled) {\n          // In debug mode, use more precise settings for better diagnostic data\n          this.analyser.smoothingTimeConstant = 0.5; // Less smoothing for more responsive debugging\n\n          // Log current state\n          console.log('Audio processor state:', {\n            isActive: this.isActive,\n            isPlaying: this.isPlaying,\n            fftSize: this.analyser.fftSize,\n            smoothingTimeConstant: this.analyser.smoothingTimeConstant,\n            bufferLength: this.bufferLength\n          });\n        } else {\n          // In production mode, optimize for performance\n          this.analyser.smoothingTimeConstant = 0.8; // More smoothing for better visual quality\n        }\n      }\n\n      // If we have an active connection, logging information about it\n      if (this.isActive && enabled) {\n        console.log('Active audio connection with current state:', this.state);\n      }\n    }\n\n    // TODO: Check if active for below functions\n  }, {\n    key: \"getFrequencyData\",\n    value: function getFrequencyData() {\n      this._normalizeFrequencyData(this.state.getFrequencyData(this.dataArray));\n      return this.dataArray;\n    }\n  }, {\n    key: \"getTimeDomainData\",\n    value: function getTimeDomainData() {\n      this._normalizeTimeDomainData(this.state.getTimeDomainData(this.dataArray));\n      return this.dataArray;\n    }\n  }, {\n    key: \"getFrequencyDataForAPI\",\n    value: function getFrequencyDataForAPI() {\n      this._normalizeFrequencyData(this.getFrequencyData(), this.dataArray);\n      return this.dataArray.slice();\n    }\n  }, {\n    key: \"getTimeDomainDataForAPI\",\n    value: function getTimeDomainDataForAPI() {\n      this._normalizeTimeDomainData(this.getTimeDomainData(), this.dataArray);\n      return this.dataArray.slice();\n    }\n  }, {\n    key: \"getFrequencyBinCount\",\n    value: function getFrequencyBinCount() {\n      return this.analyser.frequencyBinCount;\n    }\n\n    /**\r\n     * Helper function to normalize frequency data from dB (-100 to 0) to 0-255 range\r\n     * @param {Float32Array} sourceData - Raw frequency data (typically -100 to 0 dB)\r\n     * @param {Uint8Array} targetArray - Target array for normalized values\r\n     * @private\r\n     */\n  }, {\n    key: \"_normalizeFrequencyData\",\n    value: function _normalizeFrequencyData(sourceData, targetArray) {\n      for (var i = 0; i < sourceData.length; i++) {\n        // Frequency data is typically in -100 to 0 dB range\n        // Map to 0-255 range, where -100dB = 0 and 0dB = 255\n        var normalizedValue = (sourceData[i] + 100) / 100;\n        targetArray[i] = Math.floor(Math.max(0, Math.min(255, normalizedValue * 255)));\n      }\n    }\n\n    /**\r\n     * Helper function to normalize time domain data from -1,1 to 0-255 range\r\n     * @param {Float32Array} sourceData - Raw time domain data (-1 to 1)\r\n     * @param {Uint8Array} targetArray - Target array for normalized values\r\n     * @private\r\n     */\n  }, {\n    key: \"_normalizeTimeDomainData\",\n    value: function _normalizeTimeDomainData(sourceData, targetArray) {\n      for (var i = 0; i < sourceData.length; i++) {\n        // Time domain data is in -1 to 1 range\n        // Map -1.0 to 1.0 to 0-255 range\n        var normalizedValue = (sourceData[i] + 1) / 2;\n        targetArray[i] = Math.floor(Math.max(0, Math.min(255, normalizedValue * 255)));\n      }\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!AudioProcessor.instance) {\n        AudioProcessor.instance = new AudioProcessor();\n      }\n      return AudioProcessor.instance;\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/audio/AudioProcessor.js\n");

/***/ }),

/***/ "./src/scripts/audio/GPUAudioProcessor.js":
/*!************************************************!*\
  !*** ./src/scripts/audio/GPUAudioProcessor.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GPUAudioProcessor: () => (/* binding */ GPUAudioProcessor)\n/* harmony export */ });\n/* harmony import */ var _AudioProcessor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AudioProcessor.js */ \"./src/scripts/audio/AudioProcessor.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\nfunction _get() { return _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }\nfunction _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n\n/**\r\n * GPUAudioProcessor - Audio analysis class with WebGL/THREE.js integration\r\n * Handles audio input sources and converts audio data to GPU-friendly formats\r\n */\nvar GPUAudioProcessor = /*#__PURE__*/function (_AudioProcessor) {\n  /**\r\n   * Create a new GPUAudioProcessor\r\n   * @param {Object} options - Configuration options\r\n   * @param {number} [options.fftSize=2048] - FFT size for frequency analysis\r\n   * @param {number} [options.smoothingTimeConstant=0.8] - Smoothing factor for analysis\r\n   * @param {boolean} [options.debugMode=false] - Enable console debugging output\r\n   */\n  function GPUAudioProcessor() {\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, GPUAudioProcessor);\n    _this = _callSuper(this, GPUAudioProcessor); // Call parent constructor to initialize base state\n\n    // Get the audio context and analyzer from the parent class\n    _this.audioCtx = _this.audioContext;\n    _this.analyser = _this.analyser;\n\n    // Update analyzer with provided options\n    if (options.fftSize) _this.analyser.fftSize = options.fftSize;\n    if (options.smoothingTimeConstant) _this.analyser.smoothingTimeConstant = options.smoothingTimeConstant;\n\n    // Create data buffers for GPU-specific formats (Float32 vs Uint8 in base class)\n    _this.frequencyBinCount = _this.analyser.frequencyBinCount;\n    _this.frequencyData = new Float32Array(_this.frequencyBinCount);\n    _this.timeDomainData = new Float32Array(_this.frequencyBinCount);\n\n    // For debugging\n    _this.debugMode = options.debugMode || false;\n\n    // Create data textures for WebGL\n    _this.frequencyDataTexture = _this.createDataTexture(_this.frequencyData);\n    _this.timeDomainDataTexture = _this.createDataTexture(_this.timeDomainData);\n    return _this;\n  }\n\n  /**\r\n   * Creates a THREE.js texture from audio data\r\n   * @param {Float32Array} data - Audio data to convert to texture\r\n   * @returns {THREE.DataTexture} Texture containing the audio data\r\n   */\n  _inherits(GPUAudioProcessor, _AudioProcessor);\n  return _createClass(GPUAudioProcessor, [{\n    key: \"createDataTexture\",\n    value: function createDataTexture(data) {\n      var texture = new THREE.DataTexture(data, data.length, 1, THREE.RedFormat, THREE.FloatType);\n      texture.needsUpdate = true;\n      return texture;\n    }\n\n    /**\r\n     * Updates the internal textures with fresh audio data\r\n     * Called each frame to get new audio analysis\r\n     * Side-effects: Updates frequencyData, timeDomainData, and their textures\r\n     */\n  }, {\n    key: \"updateTextureData\",\n    value: function updateTextureData() {\n      // Get fresh data\n      this.analyser.getFloatFrequencyData(this.frequencyData);\n      this.analyser.getFloatTimeDomainData(this.timeDomainData);\n      this.frequencyDataTexture.needsUpdate = true;\n      this.timeDomainDataTexture.needsUpdate = true;\n    }\n\n    /**\r\n     * Initializes microphone input\r\n     * Overrides base class method to add GPU-specific handling\r\n     * @returns {Promise<void>} Promise that resolves when mic is initialized\r\n     */\n  }, {\n    key: \"initMicrophone\",\n    value: (function () {\n      var _initMicrophone = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _superPropGet(GPUAudioProcessor, \"initMicrophone\", this, 3)([]);\n            case 2:\n              // Get fresh data for our GPU textures\n              this.updateTextureData();\n              if (this.debugMode) {\n                console.log('GPU-enhanced microphone initialized');\n              }\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initMicrophone() {\n        return _initMicrophone.apply(this, arguments);\n      }\n      return initMicrophone;\n    }()\n    /**\r\n     * Initializes audio from a file\r\n     * Overrides base class method to add GPU-specific handling\r\n     * @param {File} file - The audio file to play\r\n     * @returns {Promise<void>} Promise that resolves when file is initialized\r\n     */\n    )\n  }, {\n    key: \"initFile\",\n    value: (function () {\n      var _initFile = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(file) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _superPropGet(GPUAudioProcessor, \"initFile\", this, 3)([file]);\n            case 2:\n              // Get fresh data for our GPU textures\n              this.updateTextureData();\n              if (this.debugMode) {\n                console.log('GPU-enhanced file playback initialized');\n              }\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function initFile(_x) {\n        return _initFile.apply(this, arguments);\n      }\n      return initFile;\n    }()\n    /**\r\n     * Initializes audio from a URL (for demo or preset audio)\r\n     * New GPU-specific method not in base class\r\n     * @param {string} url - The URL of the audio file to play\r\n     * @returns {Promise<void>} Promise that resolves when audio starts playing\r\n     */\n    )\n  }, {\n    key: \"initFromUrl\",\n    value: (function () {\n      var _initFromUrl = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url) {\n        var response, arrayBuffer, audioBuffer, file;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return fetch(url);\n            case 3:\n              response = _context3.sent;\n              if (response.ok) {\n                _context3.next = 6;\n                break;\n              }\n              throw new Error(\"HTTP error! Status: \".concat(response.status));\n            case 6:\n              _context3.next = 8;\n              return response.arrayBuffer();\n            case 8:\n              arrayBuffer = _context3.sent;\n              _context3.next = 11;\n              return this.audioContext.decodeAudioData(arrayBuffer);\n            case 11:\n              audioBuffer = _context3.sent;\n              // Create and set up a source using equivalent of initFile\n              // This simulates a file being loaded but from a URL\n              file = new File([arrayBuffer], \"audio-from-url.mp3\", {\n                type: \"audio/mpeg\"\n              });\n              _context3.next = 15;\n              return this.initFile(file);\n            case 15:\n              if (this.debugMode) {\n                console.log('Playing audio from URL:', url);\n              }\n              _context3.next = 21;\n              break;\n            case 18:\n              _context3.prev = 18;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Error loading audio from URL:', _context3.t0);\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 18]]);\n      }));\n      function initFromUrl(_x2) {\n        return _initFromUrl.apply(this, arguments);\n      }\n      return initFromUrl;\n    }()\n    /**\r\n     * Stops any currently playing audio source\r\n     * Overrides base class method to add GPU-specific cleanup\r\n     */\n    )\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      // Call the base class implementation to handle state transitions\n      _superPropGet(GPUAudioProcessor, \"stop\", this, 3)([]);\n\n      // Clear our GPU textures or reset them to default values\n      this.frequencyData.fill(0);\n      this.timeDomainData.fill(0);\n      this.frequencyDataTexture.needsUpdate = true;\n      this.timeDomainDataTexture.needsUpdate = true;\n      if (this.debugMode) {\n        console.log('GPU audio processing stopped');\n      }\n    }\n\n    /**\r\n     * Pauses the current audio source\r\n     * Overrides base class method\r\n     */\n  }, {\n    key: \"pause\",\n    value: (function () {\n      var _pause = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _superPropGet(GPUAudioProcessor, \"pause\", this, 3)([]);\n            case 2:\n              if (this.debugMode) {\n                console.log('GPU audio processing paused');\n              }\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function pause() {\n        return _pause.apply(this, arguments);\n      }\n      return pause;\n    }()\n    /**\r\n     * Resumes the current audio source\r\n     * Overrides base class method\r\n     */\n    )\n  }, {\n    key: \"play\",\n    value: (function () {\n      var _play = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _superPropGet(GPUAudioProcessor, \"play\", this, 3)([]);\n            case 2:\n              if (this.debugMode) {\n                console.log('GPU audio processing resumed');\n              }\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function play() {\n        return _play.apply(this, arguments);\n      }\n      return play;\n    }()\n    /**\r\n     * @deprecated Use stop() instead\r\n     */\n    )\n  }, {\n    key: \"stopCurrentSource\",\n    value: function stopCurrentSource() {\n      console.warn('stopCurrentSource() is deprecated, use stop() instead');\n      this.stop();\n    }\n\n    /**\r\n     * @deprecated Use pause() instead\r\n     */\n  }, {\n    key: \"pauseCurrentSource\",\n    value: function pauseCurrentSource() {\n      console.warn('pauseCurrentSource() is deprecated, use pause() instead');\n      this.pause();\n    }\n\n    /**\r\n     * @deprecated Use play() instead\r\n     */\n  }, {\n    key: \"resumeCurrentSource\",\n    value: function resumeCurrentSource() {\n      console.warn('resumeCurrentSource() is deprecated, use play() instead');\n      this.play();\n    }\n\n    /**\r\n     * Returns raw frequency domain data\r\n     * @returns {Float32Array} Frequency data in decibels (typically -100 to 0 dB)\r\n     */\n  }, {\n    key: \"getFrequencyData\",\n    value: function getFrequencyData() {\n      return this.frequencyData;\n    }\n\n    /**\r\n     * Returns raw time domain data\r\n     * @returns {Float32Array} Time domain data (values between -1 and 1)\r\n     */\n  }, {\n    key: \"getTimeDomainData\",\n    value: function getTimeDomainData() {\n      // Make sure we have the latest data\n      this.analyser.getFloatTimeDomainData(this.timeDomainData);\n      return this.timeDomainData;\n    }\n\n    /**\r\n     * Returns the frequency data texture for use in shaders\r\n     * @returns {THREE.DataTexture} Texture containing frequency data\r\n     */\n  }, {\n    key: \"getFrequencyDataTexture\",\n    value: function getFrequencyDataTexture() {\n      return this.frequencyDataTexture;\n    }\n\n    /**\r\n     * Returns the time domain data texture for use in shaders\r\n     * @returns {THREE.DataTexture} Texture containing time domain data\r\n     */\n  }, {\n    key: \"getTimeDomainDataTexture\",\n    value: function getTimeDomainDataTexture() {\n      return this.timeDomainDataTexture;\n    }\n\n    /**\r\n     * Cleans up all resources used by this processor\r\n     * Should be called when the processor is no longer needed\r\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      // First stop any active audio\n      this.stop();\n\n      // Clean up WebGL resources\n      if (this.frequencyDataTexture) {\n        this.frequencyDataTexture.dispose();\n        this.frequencyDataTexture = null;\n      }\n      if (this.timeDomainDataTexture) {\n        this.timeDomainDataTexture.dispose();\n        this.timeDomainDataTexture = null;\n      }\n\n      // The base class manages the AudioContext cleanup\n      // so we don't need to close it manually\n\n      if (this.debugMode) {\n        console.log('GPU audio processor resources disposed');\n      }\n    }\n\n    /**\r\n     * Connects an external analyzer node instead of the internal one\r\n     * @param {AnalyserNode} analyser - Web Audio analyzer node to use\r\n     */\n  }, {\n    key: \"connectExternalAnalyser\",\n    value: function connectExternalAnalyser(analyser) {\n      this.analyser = analyser;\n      console.log('Connected external analyzer');\n    }\n\n    /**\r\n     * Sets the volume of the audio output\r\n     * @param {number} volume - Volume level between 0 and 1\r\n     */\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(volume) {\n      // Get the current state\n      var currentState = this.state;\n\n      // Use a more moderate scaling curve - square root for more audible range at low volumes\n      // This makes lower volume settings more usable while still providing good control\n      var scaledVolume = Math.sqrt(volume);\n\n      // Store the current volume value for reference\n      this.volume = volume;\n\n      // Call the state's setVolume method if available\n      if (currentState && typeof currentState.setVolume === 'function') {\n        // The state will handle all volume implementation\n        // Pass the original volume, not the scaled volume, to avoid double-scaling\n        currentState.setVolume(volume);\n\n        // Log for debugging\n        console.log('Volume set via state method:', volume, 'Scaled volume (not used):', scaledVolume);\n\n        // We've delegated volume control to the state, so no need to also do it here\n        // This prevents double-application of volume changes\n        return;\n      }\n\n      // Fallback: If state doesn't have a setVolume method, handle it here\n      if (currentState && currentState.gainNode) {\n        // If the state has a gain node, use it\n        currentState.gainNode.gain.value = volume === 0 ? 0 : Math.max(0.0001, scaledVolume);\n        console.log('Volume set directly on state gain node:', volume, 'Applied gain:', currentState.gainNode.gain.value);\n      } else if (this.gainNode) {\n        // Use our local gain node as fallback\n        this.gainNode.gain.value = volume === 0 ? 0 : Math.max(0.0001, scaledVolume);\n        console.log('Volume set on processor gain node:', volume, 'Applied gain:', this.gainNode.gain.value);\n      } else {\n        // Create a gain node if none exists\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.value = volume === 0 ? 0 : Math.max(0.0001, scaledVolume);\n\n        // Connect through the state system if possible\n        if (this.analyser) {\n          try {\n            this.analyser.disconnect();\n            this.analyser.connect(this.gainNode);\n            this.gainNode.connect(this.audioContext.destination);\n            console.log('Created new gain node and set up connections');\n          } catch (e) {\n            console.error('Error setting up gain node:', e);\n          }\n        }\n        console.log('Created new gain node with volume:', volume, 'Applied gain:', this.gainNode.gain.value);\n      }\n      if (this.debugMode) {\n        console.log('Volume set to:', volume, 'Scaled volume:', scaledVolume);\n      }\n    }\n\n    /**\r\n     * Updates the internal analyzer settings and recreates data buffers\r\n     * Should be called after changing FFT size or other analyzer settings\r\n     */\n  }, {\n    key: \"updateAnalyzerSettings\",\n    value: function updateAnalyzerSettings() {\n      // Get the current fft size and smoothing\n      var fftSize = this.analyser.fftSize;\n      var smoothingTimeConstant = this.analyser.smoothingTimeConstant;\n\n      // Store current values to restore after setup\n      this.fftSize = fftSize;\n      this.smoothingTimeConstant = smoothingTimeConstant;\n\n      // Update our data buffers after analyzer settings change\n      this.frequencyBinCount = this.analyser.frequencyBinCount;\n      this.frequencyData = new Float32Array(this.frequencyBinCount);\n      this.timeDomainData = new Float32Array(this.frequencyBinCount);\n\n      // Recreate textures with new size\n      if (this.frequencyDataTexture) {\n        this.frequencyDataTexture.dispose();\n      }\n      if (this.timeDomainDataTexture) {\n        this.timeDomainDataTexture.dispose();\n      }\n      this.frequencyDataTexture = this.createDataTexture(this.frequencyData);\n      this.timeDomainDataTexture = this.createDataTexture(this.timeDomainData);\n      if (this.debugMode) {\n        console.log(\"Analyzer settings updated: fftSize=\".concat(fftSize, \", smoothing=\").concat(smoothingTimeConstant));\n      }\n    }\n\n    /**\r\n     * Set the FFT size for frequency analysis\r\n     * @param {number} size - Must be a power of 2 between 32 and 32768\r\n     */\n  }, {\n    key: \"setFFTSize\",\n    value: function setFFTSize(size) {\n      // Ensure size is a valid FFT size (power of 2)\n      var validSizes = [32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768];\n      if (!validSizes.includes(size)) {\n        console.error('FFT size must be a power of 2 between 32 and 32768');\n        return;\n      }\n\n      // Set the size on the analyzer\n      this.analyser.fftSize = size;\n\n      // Update our buffers and textures\n      this.updateAnalyzerSettings();\n    }\n\n    /**\r\n     * @deprecated Use getFrequencyDataTexture() and getTimeDomainDataTexture() instead\r\n     */\n  }, {\n    key: \"reconnectAnalyzer\",\n    value: function reconnectAnalyzer() {\n      var connectToOutput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      console.warn('reconnectAnalyzer() is deprecated as it may interfere with state management');\n      // Legacy implementation maintained for backward compatibility\n      try {\n        this.analyser.disconnect();\n        if (connectToOutput) {\n          if (this.gainNode) {\n            this.analyser.connect(this.gainNode);\n            this.gainNode.connect(this.audioContext.destination);\n          } else {\n            this.analyser.connect(this.audioContext.destination);\n          }\n        }\n      } catch (e) {\n        console.error('Error in reconnectAnalyzer:', e);\n      }\n    }\n\n    /**\r\n     * @deprecated Use the state pattern methods instead\r\n     */\n  }, {\n    key: \"setupAnalyser\",\n    value: function setupAnalyser() {\n      console.warn('setupAnalyser() is deprecated as it may interfere with state management');\n      this.updateAnalyzerSettings();\n    }\n\n    /**\r\n     * @deprecated Use updateAnalyzerSettings() instead\r\n     */\n  }, {\n    key: \"ensureAudioContext\",\n    value: function ensureAudioContext() {\n      console.warn('ensureAudioContext() is deprecated. Use updateAnalyzerSettings() instead');\n      // Forward to play() which handles resuming the AudioContext\n      this.play();\n    }\n\n    /**\r\n     * Override the base class getFrequencyDataForAPI method to use our Float32 data\r\n     * @returns {Uint8Array} Normalized frequency data in 0-255 range\r\n     */\n  }, {\n    key: \"getFrequencyDataForAPI\",\n    value: function getFrequencyDataForAPI() {\n      // Update our Float32 data first\n      this.analyser.getFloatFrequencyData(this.frequencyData);\n\n      // Then convert to Uint8Array format for API compatibility\n      var uint8Array = new Uint8Array(this.frequencyBinCount);\n      this._normalizeFrequencyData(this.frequencyData, uint8Array);\n      if (this.debugMode && uint8Array.length > 0) {\n        console.log(\"Converted frequency data sample:\", Array.from(uint8Array.slice(0, 5)));\n      }\n      return uint8Array;\n    }\n\n    /**\r\n     * Override the base class getTimeDomainDataForAPI method to use our Float32 data\r\n     * @returns {Uint8Array} Normalized time domain data in 0-255 range\r\n     */\n  }, {\n    key: \"getTimeDomainDataForAPI\",\n    value: function getTimeDomainDataForAPI() {\n      // Update our Float32 data first\n      this.analyser.getFloatTimeDomainData(this.timeDomainData);\n\n      // Then convert to Uint8Array format for API compatibility\n      var uint8Array = new Uint8Array(this.frequencyBinCount);\n      this._normalizeTimeDomainData(this.timeDomainData, uint8Array);\n      return uint8Array;\n    }\n\n    /**\r\n     * Helper function to normalize frequency data from dB (-100 to 0) to 0-255 range\r\n     * @param {Float32Array} sourceData - Raw frequency data (typically -100 to 0 dB)\r\n     * @param {Uint8Array} targetArray - Target array for normalized values\r\n     * @private\r\n     */\n  }, {\n    key: \"_normalizeFrequencyData\",\n    value: function _normalizeFrequencyData(sourceData, targetArray) {\n      for (var i = 0; i < this.frequencyBinCount; i++) {\n        // Frequency data is typically in -100 to 0 dB range\n        // Map to 0-255 range, where -100dB = 0 and 0dB = 255\n        var normalizedValue = (sourceData[i] + 100) / 100;\n        targetArray[i] = Math.floor(Math.max(0, Math.min(255, normalizedValue * 255)));\n      }\n    }\n\n    /**\r\n     * Helper function to normalize time domain data from -1,1 to 0-255 range\r\n     * @param {Float32Array} sourceData - Raw time domain data (-1 to 1)\r\n     * @param {Uint8Array} targetArray - Target array for normalized values\r\n     * @private\r\n     */\n  }, {\n    key: \"_normalizeTimeDomainData\",\n    value: function _normalizeTimeDomainData(sourceData, targetArray) {\n      for (var i = 0; i < this.frequencyBinCount; i++) {\n        // Time domain data is in -1 to 1 range\n        // Map -1.0 to 1.0 to 0-255 range\n        var normalizedValue = (sourceData[i] + 1) / 2;\n        targetArray[i] = Math.floor(Math.max(0, Math.min(255, normalizedValue * 255)));\n      }\n    }\n\n    /**\r\n     * Initializes mock data for testing\r\n     * Overrides base class method\r\n     */\n  }, {\n    key: \"initMockData\",\n    value: function initMockData() {\n      // Call the base class implementation\n      _superPropGet(GPUAudioProcessor, \"initMockData\", this, 3)([]);\n\n      // Update our GPU textures\n      this.updateTextureData();\n      if (this.debugMode) {\n        console.log('GPU-enhanced mock data initialized');\n      }\n    }\n  }]);\n}(_AudioProcessor_js__WEBPACK_IMPORTED_MODULE_0__.AudioProcessor);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9hdWRpby9HUFVBdWRpb1Byb2Nlc3Nvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7K0NBQ0EscUpBQUFBLG1CQUFBLFlBQUFBLG9CQUFBLFdBQUFDLENBQUEsU0FBQUMsQ0FBQSxFQUFBRCxDQUFBLE9BQUFFLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxTQUFBLEVBQUFDLENBQUEsR0FBQUgsQ0FBQSxDQUFBSSxjQUFBLEVBQUFDLENBQUEsR0FBQUosTUFBQSxDQUFBSyxjQUFBLGNBQUFQLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLElBQUFELENBQUEsQ0FBQUQsQ0FBQSxJQUFBRSxDQUFBLENBQUFPLEtBQUEsS0FBQUMsQ0FBQSx3QkFBQUMsTUFBQSxHQUFBQSxNQUFBLE9BQUFDLENBQUEsR0FBQUYsQ0FBQSxDQUFBRyxRQUFBLGtCQUFBQyxDQUFBLEdBQUFKLENBQUEsQ0FBQUssYUFBQSx1QkFBQUMsQ0FBQSxHQUFBTixDQUFBLENBQUFPLFdBQUEsOEJBQUFDLE9BQUFqQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxXQUFBQyxNQUFBLENBQUFLLGNBQUEsQ0FBQVAsQ0FBQSxFQUFBRCxDQUFBLElBQUFTLEtBQUEsRUFBQVAsQ0FBQSxFQUFBaUIsVUFBQSxNQUFBQyxZQUFBLE1BQUFDLFFBQUEsU0FBQXBCLENBQUEsQ0FBQUQsQ0FBQSxXQUFBa0IsTUFBQSxtQkFBQWpCLENBQUEsSUFBQWlCLE1BQUEsWUFBQUEsT0FBQWpCLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLFdBQUFELENBQUEsQ0FBQUQsQ0FBQSxJQUFBRSxDQUFBLGdCQUFBb0IsS0FBQXJCLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLEVBQUFHLENBQUEsUUFBQUssQ0FBQSxHQUFBVixDQUFBLElBQUFBLENBQUEsQ0FBQUksU0FBQSxZQUFBbUIsU0FBQSxHQUFBdkIsQ0FBQSxHQUFBdUIsU0FBQSxFQUFBWCxDQUFBLEdBQUFULE1BQUEsQ0FBQXFCLE1BQUEsQ0FB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QUMsRUFBRUosSUFBSSxDQUFDOEIsR0FBRyxDQUFDLEdBQUcsRUFBRUYsZUFBZSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7TUFDaEY7SUFDRjs7SUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFMSTtJQUFBM0ksR0FBQTtJQUFBdEcsS0FBQSxFQU1BLFNBQUE4Tyx3QkFBd0JBLENBQUNDLFVBQVUsRUFBRUMsV0FBVyxFQUFFO01BQ2hELEtBQUssSUFBSS9PLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUN3SSxpQkFBaUIsRUFBRXhJLENBQUMsRUFBRSxFQUFFO1FBQy9DO1FBQ0E7UUFDQSxJQUFNZ1AsZUFBZSxHQUFHLENBQUNGLFVBQVUsQ0FBQzlPLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQy9DK08sV0FBVyxDQUFDL08sQ0FBQyxDQUFDLEdBQUdvTixJQUFJLENBQUM2QixLQUFLLENBQUM3QixJQUFJLENBQUNJLEdBQUcsQ0FBQyxDQUFDLEVBQUVKLElBQUksQ0FBQzhCLEdBQUcsQ0FBQyxHQUFHLEVBQUVGLGVBQWUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO01BQ2hGO0lBQ0Y7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7RUFISTtJQUFBM0ksR0FBQTtJQUFBdEcsS0FBQSxFQUlBLFNBQUFvUCxZQUFZQSxDQUFBLEVBQUc7TUFDYjtNQUNBOUgsYUFBQSxDQUFBUyxpQkFBQTs7TUFFQTtNQUNBLElBQUksQ0FBQ3lCLGlCQUFpQixDQUFDLENBQUM7TUFFeEIsSUFBSSxJQUFJLENBQUNYLFNBQVMsRUFBRTtRQUNsQmtCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLG9DQUFvQyxDQUFDO01BQ25EO0lBQ0Y7RUFBQztBQUFBLEVBemZrQ2xDLDhEQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmV2ZXJiLXhyLy4vc3JjL3NjcmlwdHMvYXVkaW8vR1BVQXVkaW9Qcm9jZXNzb3IuanM/Y2VmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdWRpb1Byb2Nlc3NvciB9IGZyb20gJy4vQXVkaW9Qcm9jZXNzb3IuanMnO1xyXG4vKipcclxuICogR1BVQXVkaW9Qcm9jZXNzb3IgLSBBdWRpbyBhbmFseXNpcyBjbGFzcyB3aXRoIFdlYkdML1RIUkVFLmpzIGludGVncmF0aW9uXHJcbiAqIEhhbmRsZXMgYXVkaW8gaW5wdXQgc291cmNlcyBhbmQgY29udmVydHMgYXVkaW8gZGF0YSB0byBHUFUtZnJpZW5kbHkgZm9ybWF0c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEdQVUF1ZGlvUHJvY2Vzc29yIGV4dGVuZHMgQXVkaW9Qcm9jZXNzb3Ige1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgR1BVQXVkaW9Qcm9jZXNzb3JcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQ29uZmlndXJhdGlvbiBvcHRpb25zXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZmZ0U2l6ZT0yMDQ4XSAtIEZGVCBzaXplIGZvciBmcmVxdWVuY3kgYW5hbHlzaXNcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zbW9vdGhpbmdUaW1lQ29uc3RhbnQ9MC44XSAtIFNtb290aGluZyBmYWN0b3IgZm9yIGFuYWx5c2lzXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRlYnVnTW9kZT1mYWxzZV0gLSBFbmFibGUgY29uc29sZSBkZWJ1Z2dpbmcgb3V0cHV0XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICBzdXBlcigpOyAvLyBDYWxsIHBhcmVudCBjb25zdHJ1Y3RvciB0byBpbml0aWFsaXplIGJhc2Ugc3RhdGVcclxuICAgICAgXHJcbiAgICAgIC8vIEdldCB0aGUgYXVkaW8gY29udGV4dCBhbmQgYW5hbHl6ZXIgZnJvbSB0aGUgcGFyZW50IGNsYXNzXHJcbiAgICAgIHRoaXMuYXVkaW9DdHggPSB0aGlzLmF1ZGlvQ29udGV4dDtcclxuICAgICAgdGhpcy5hbmFseXNlciA9IHRoaXMuYW5hbHlzZXI7XHJcbiAgICAgIFxyXG4gICAgICAvLyBVcGRhdGUgYW5hbHl6ZXIgd2l0aCBwcm92aWRlZCBvcHRpb25zXHJcbiAgICAgIGlmIChvcHRpb25zLmZmdFNpemUpIHRoaXMuYW5hbHlzZXIuZmZ0U2l6ZSA9IG9wdGlvbnMuZmZ0U2l6ZTtcclxuICAgICAgaWYgKG9wdGlvbnMuc21vb3RoaW5nVGltZUNvbnN0YW50KSB0aGlzLmFuYWx5c2VyLnNtb290aGluZ1RpbWVDb25zdGFudCA9IG9wdGlvbnMuc21vb3RoaW5nVGltZUNvbnN0YW50O1xyXG4gICAgICBcclxuICAgICAgLy8gQ3JlYXRlIGRhdGEgYnVmZmVycyBmb3IgR1BVLXNwZWNpZmljIGZvcm1hdHMgKEZsb2F0MzIgdnMgVWludDggaW4gYmFzZSBjbGFzcylcclxuICAgICAgdGhpcy5mcmVxdWVuY3lCaW5Db3VudCA9IHRoaXMuYW5hbHlzZXIuZnJlcXVlbmN5QmluQ291bnQ7XHJcbiAgICAgIHRoaXMuZnJlcXVlbmN5RGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5mcmVxdWVuY3lCaW5Db3VudCk7XHJcbiAgICAgIHRoaXMudGltZURvbWFpbkRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuZnJlcXVlbmN5QmluQ291bnQpO1xyXG4gICAgICBcclxuICAgICAgLy8gRm9yIGRlYnVnZ2luZ1xyXG4gICAgICB0aGlzLmRlYnVnTW9kZSA9IG9wdGlvbnMuZGVidWdNb2RlIHx8IGZhbHNlO1xyXG4gICAgICBcclxuICAgICAgLy8gQ3JlYXRlIGRhdGEgdGV4dHVyZXMgZm9yIFdlYkdMXHJcbiAgICAgIHRoaXMuZnJlcXVlbmN5RGF0YVRleHR1cmUgPSB0aGlzLmNyZWF0ZURhdGFUZXh0dXJlKHRoaXMuZnJlcXVlbmN5RGF0YSk7XHJcbiAgICAgIHRoaXMudGltZURvbWFpbkRhdGFUZXh0dXJlID0gdGhpcy5jcmVhdGVEYXRhVGV4dHVyZSh0aGlzLnRpbWVEb21haW5EYXRhKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgVEhSRUUuanMgdGV4dHVyZSBmcm9tIGF1ZGlvIGRhdGFcclxuICAgICAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSBkYXRhIC0gQXVkaW8gZGF0YSB0byBjb252ZXJ0IHRvIHRleHR1cmVcclxuICAgICAqIEByZXR1cm5zIHtUSFJFRS5EYXRhVGV4dHVyZX0gVGV4dHVyZSBjb250YWluaW5nIHRoZSBhdWRpbyBkYXRhXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZURhdGFUZXh0dXJlKGRhdGEpIHtcclxuICAgICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZShcclxuICAgICAgICBkYXRhLFxyXG4gICAgICAgIGRhdGEubGVuZ3RoLFxyXG4gICAgICAgIDEsXHJcbiAgICAgICAgVEhSRUUuUmVkRm9ybWF0LFxyXG4gICAgICAgIFRIUkVFLkZsb2F0VHlwZVxyXG4gICAgICApO1xyXG4gICAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIHRleHR1cmU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyB0aGUgaW50ZXJuYWwgdGV4dHVyZXMgd2l0aCBmcmVzaCBhdWRpbyBkYXRhXHJcbiAgICAgKiBDYWxsZWQgZWFjaCBmcmFtZSB0byBnZXQgbmV3IGF1ZGlvIGFuYWx5c2lzXHJcbiAgICAgKiBTaWRlLWVmZmVjdHM6IFVwZGF0ZXMgZnJlcXVlbmN5RGF0YSwgdGltZURvbWFpbkRhdGEsIGFuZCB0aGVpciB0ZXh0dXJlc1xyXG4gICAgICovXHJcbiAgICB1cGRhdGVUZXh0dXJlRGF0YSgpIHtcclxuICAgICAgLy8gR2V0IGZyZXNoIGRhdGFcclxuICAgICAgdGhpcy5hbmFseXNlci5nZXRGbG9hdEZyZXF1ZW5jeURhdGEodGhpcy5mcmVxdWVuY3lEYXRhKTtcclxuICAgICAgdGhpcy5hbmFseXNlci5nZXRGbG9hdFRpbWVEb21haW5EYXRhKHRoaXMudGltZURvbWFpbkRhdGEpO1xyXG4gICAgICBcclxuICAgICAgdGhpcy5mcmVxdWVuY3lEYXRhVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIHRoaXMudGltZURvbWFpbkRhdGFUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyBtaWNyb3Bob25lIGlucHV0XHJcbiAgICAgKiBPdmVycmlkZXMgYmFzZSBjbGFzcyBtZXRob2QgdG8gYWRkIEdQVS1zcGVjaWZpYyBoYW5kbGluZ1xyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIG1pYyBpcyBpbml0aWFsaXplZFxyXG4gICAgICovXHJcbiAgICBhc3luYyBpbml0TWljcm9waG9uZSgpIHtcclxuICAgICAgLy8gQ2FsbCB0aGUgYmFzZSBjbGFzcyBpbXBsZW1lbnRhdGlvbiB0byBoYW5kbGUgc3RhdGUgdHJhbnNpdGlvbnNcclxuICAgICAgYXdhaXQgc3VwZXIuaW5pdE1pY3JvcGhvbmUoKTtcclxuICAgICAgXHJcbiAgICAgIC8vIEdldCBmcmVzaCBkYXRhIGZvciBvdXIgR1BVIHRleHR1cmVzXHJcbiAgICAgIHRoaXMudXBkYXRlVGV4dHVyZURhdGEoKTtcclxuICAgICAgXHJcbiAgICAgIGlmICh0aGlzLmRlYnVnTW9kZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdHUFUtZW5oYW5jZWQgbWljcm9waG9uZSBpbml0aWFsaXplZCcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgYXVkaW8gZnJvbSBhIGZpbGVcclxuICAgICAqIE92ZXJyaWRlcyBiYXNlIGNsYXNzIG1ldGhvZCB0byBhZGQgR1BVLXNwZWNpZmljIGhhbmRsaW5nXHJcbiAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgLSBUaGUgYXVkaW8gZmlsZSB0byBwbGF5XHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZmlsZSBpcyBpbml0aWFsaXplZFxyXG4gICAgICovXHJcbiAgICBhc3luYyBpbml0RmlsZShmaWxlKSB7XHJcbiAgICAgIC8vIENhbGwgdGhlIGJhc2UgY2xhc3MgaW1wbGVtZW50YXRpb24gdG8gaGFuZGxlIHN0YXRlIHRyYW5zaXRpb25zXHJcbiAgICAgIGF3YWl0IHN1cGVyLmluaXRGaWxlKGZpbGUpO1xyXG4gICAgICBcclxuICAgICAgLy8gR2V0IGZyZXNoIGRhdGEgZm9yIG91ciBHUFUgdGV4dHVyZXNcclxuICAgICAgdGhpcy51cGRhdGVUZXh0dXJlRGF0YSgpO1xyXG4gICAgICBcclxuICAgICAgaWYgKHRoaXMuZGVidWdNb2RlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0dQVS1lbmhhbmNlZCBmaWxlIHBsYXliYWNrIGluaXRpYWxpemVkJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyBhdWRpbyBmcm9tIGEgVVJMIChmb3IgZGVtbyBvciBwcmVzZXQgYXVkaW8pXHJcbiAgICAgKiBOZXcgR1BVLXNwZWNpZmljIG1ldGhvZCBub3QgaW4gYmFzZSBjbGFzc1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgb2YgdGhlIGF1ZGlvIGZpbGUgdG8gcGxheVxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGF1ZGlvIHN0YXJ0cyBwbGF5aW5nXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGluaXRGcm9tVXJsKHVybCkge1xyXG4gICAgICAvLyBGZXRjaCBhbmQgZGVjb2RlIHRoZSBhdWRpbyBkYXRhXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xyXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgU3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xyXG4gICAgICAgIGNvbnN0IGF1ZGlvQnVmZmVyID0gYXdhaXQgdGhpcy5hdWRpb0NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGFycmF5QnVmZmVyKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDcmVhdGUgYW5kIHNldCB1cCBhIHNvdXJjZSB1c2luZyBlcXVpdmFsZW50IG9mIGluaXRGaWxlXHJcbiAgICAgICAgLy8gVGhpcyBzaW11bGF0ZXMgYSBmaWxlIGJlaW5nIGxvYWRlZCBidXQgZnJvbSBhIFVSTFxyXG4gICAgICAgIGNvbnN0IGZpbGUgPSBuZXcgRmlsZShbYXJyYXlCdWZmZXJdLCBcImF1ZGlvLWZyb20tdXJsLm1wM1wiLCB7XHJcbiAgICAgICAgICB0eXBlOiBcImF1ZGlvL21wZWdcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdEZpbGUoZmlsZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZGVidWdNb2RlKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnUGxheWluZyBhdWRpbyBmcm9tIFVSTDonLCB1cmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBhdWRpbyBmcm9tIFVSTDonLCBlcnIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogU3RvcHMgYW55IGN1cnJlbnRseSBwbGF5aW5nIGF1ZGlvIHNvdXJjZVxyXG4gICAgICogT3ZlcnJpZGVzIGJhc2UgY2xhc3MgbWV0aG9kIHRvIGFkZCBHUFUtc3BlY2lmaWMgY2xlYW51cFxyXG4gICAgICovXHJcbiAgICBzdG9wKCkge1xyXG4gICAgICAvLyBDYWxsIHRoZSBiYXNlIGNsYXNzIGltcGxlbWVudGF0aW9uIHRvIGhhbmRsZSBzdGF0ZSB0cmFuc2l0aW9uc1xyXG4gICAgICBzdXBlci5zdG9wKCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBDbGVhciBvdXIgR1BVIHRleHR1cmVzIG9yIHJlc2V0IHRoZW0gdG8gZGVmYXVsdCB2YWx1ZXNcclxuICAgICAgdGhpcy5mcmVxdWVuY3lEYXRhLmZpbGwoMCk7XHJcbiAgICAgIHRoaXMudGltZURvbWFpbkRhdGEuZmlsbCgwKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMuZnJlcXVlbmN5RGF0YVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICB0aGlzLnRpbWVEb21haW5EYXRhVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIFxyXG4gICAgICBpZiAodGhpcy5kZWJ1Z01vZGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnR1BVIGF1ZGlvIHByb2Nlc3Npbmcgc3RvcHBlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogUGF1c2VzIHRoZSBjdXJyZW50IGF1ZGlvIHNvdXJjZVxyXG4gICAgICogT3ZlcnJpZGVzIGJhc2UgY2xhc3MgbWV0aG9kXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHBhdXNlKCkge1xyXG4gICAgICAvLyBDYWxsIHRoZSBiYXNlIGNsYXNzIGltcGxlbWVudGF0aW9uXHJcbiAgICAgIGF3YWl0IHN1cGVyLnBhdXNlKCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAodGhpcy5kZWJ1Z01vZGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnR1BVIGF1ZGlvIHByb2Nlc3NpbmcgcGF1c2VkJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXN1bWVzIHRoZSBjdXJyZW50IGF1ZGlvIHNvdXJjZVxyXG4gICAgICogT3ZlcnJpZGVzIGJhc2UgY2xhc3MgbWV0aG9kXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHBsYXkoKSB7XHJcbiAgICAgIC8vIENhbGwgdGhlIGJhc2UgY2xhc3MgaW1wbGVtZW50YXRpb25cclxuICAgICAgYXdhaXQgc3VwZXIucGxheSgpO1xyXG4gICAgICBcclxuICAgICAgaWYgKHRoaXMuZGVidWdNb2RlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0dQVSBhdWRpbyBwcm9jZXNzaW5nIHJlc3VtZWQnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHN0b3AoKSBpbnN0ZWFkXHJcbiAgICAgKi9cclxuICAgIHN0b3BDdXJyZW50U291cmNlKCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ3N0b3BDdXJyZW50U291cmNlKCkgaXMgZGVwcmVjYXRlZCwgdXNlIHN0b3AoKSBpbnN0ZWFkJyk7XHJcbiAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHBhdXNlKCkgaW5zdGVhZFxyXG4gICAgICovXHJcbiAgICBwYXVzZUN1cnJlbnRTb3VyY2UoKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybigncGF1c2VDdXJyZW50U291cmNlKCkgaXMgZGVwcmVjYXRlZCwgdXNlIHBhdXNlKCkgaW5zdGVhZCcpO1xyXG4gICAgICB0aGlzLnBhdXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgcGxheSgpIGluc3RlYWRcclxuICAgICAqL1xyXG4gICAgcmVzdW1lQ3VycmVudFNvdXJjZSgpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdyZXN1bWVDdXJyZW50U291cmNlKCkgaXMgZGVwcmVjYXRlZCwgdXNlIHBsYXkoKSBpbnN0ZWFkJyk7XHJcbiAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyByYXcgZnJlcXVlbmN5IGRvbWFpbiBkYXRhXHJcbiAgICAgKiBAcmV0dXJucyB7RmxvYXQzMkFycmF5fSBGcmVxdWVuY3kgZGF0YSBpbiBkZWNpYmVscyAodHlwaWNhbGx5IC0xMDAgdG8gMCBkQilcclxuICAgICAqL1xyXG4gICAgZ2V0RnJlcXVlbmN5RGF0YSgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZnJlcXVlbmN5RGF0YTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgcmF3IHRpbWUgZG9tYWluIGRhdGFcclxuICAgICAqIEByZXR1cm5zIHtGbG9hdDMyQXJyYXl9IFRpbWUgZG9tYWluIGRhdGEgKHZhbHVlcyBiZXR3ZWVuIC0xIGFuZCAxKVxyXG4gICAgICovXHJcbiAgICBnZXRUaW1lRG9tYWluRGF0YSgpIHtcclxuICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgdGhlIGxhdGVzdCBkYXRhXHJcbiAgICAgIHRoaXMuYW5hbHlzZXIuZ2V0RmxvYXRUaW1lRG9tYWluRGF0YSh0aGlzLnRpbWVEb21haW5EYXRhKTtcclxuICAgICAgcmV0dXJuIHRoaXMudGltZURvbWFpbkRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBmcmVxdWVuY3kgZGF0YSB0ZXh0dXJlIGZvciB1c2UgaW4gc2hhZGVyc1xyXG4gICAgICogQHJldHVybnMge1RIUkVFLkRhdGFUZXh0dXJlfSBUZXh0dXJlIGNvbnRhaW5pbmcgZnJlcXVlbmN5IGRhdGFcclxuICAgICAqL1xyXG4gICAgZ2V0RnJlcXVlbmN5RGF0YVRleHR1cmUoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmZyZXF1ZW5jeURhdGFUZXh0dXJlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgdGltZSBkb21haW4gZGF0YSB0ZXh0dXJlIGZvciB1c2UgaW4gc2hhZGVyc1xyXG4gICAgICogQHJldHVybnMge1RIUkVFLkRhdGFUZXh0dXJlfSBUZXh0dXJlIGNvbnRhaW5pbmcgdGltZSBkb21haW4gZGF0YVxyXG4gICAgICovXHJcbiAgICBnZXRUaW1lRG9tYWluRGF0YVRleHR1cmUoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnRpbWVEb21haW5EYXRhVGV4dHVyZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsZWFucyB1cCBhbGwgcmVzb3VyY2VzIHVzZWQgYnkgdGhpcyBwcm9jZXNzb3JcclxuICAgICAqIFNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgcHJvY2Vzc29yIGlzIG5vIGxvbmdlciBuZWVkZWRcclxuICAgICAqL1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgLy8gRmlyc3Qgc3RvcCBhbnkgYWN0aXZlIGF1ZGlvXHJcbiAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICBcclxuICAgICAgLy8gQ2xlYW4gdXAgV2ViR0wgcmVzb3VyY2VzXHJcbiAgICAgIGlmICh0aGlzLmZyZXF1ZW5jeURhdGFUZXh0dXJlKSB7XHJcbiAgICAgICAgdGhpcy5mcmVxdWVuY3lEYXRhVGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5mcmVxdWVuY3lEYXRhVGV4dHVyZSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmICh0aGlzLnRpbWVEb21haW5EYXRhVGV4dHVyZSkge1xyXG4gICAgICAgIHRoaXMudGltZURvbWFpbkRhdGFUZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnRpbWVEb21haW5EYXRhVGV4dHVyZSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFRoZSBiYXNlIGNsYXNzIG1hbmFnZXMgdGhlIEF1ZGlvQ29udGV4dCBjbGVhbnVwXHJcbiAgICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gY2xvc2UgaXQgbWFudWFsbHlcclxuICAgICAgXHJcbiAgICAgIGlmICh0aGlzLmRlYnVnTW9kZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdHUFUgYXVkaW8gcHJvY2Vzc29yIHJlc291cmNlcyBkaXNwb3NlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25uZWN0cyBhbiBleHRlcm5hbCBhbmFseXplciBub2RlIGluc3RlYWQgb2YgdGhlIGludGVybmFsIG9uZVxyXG4gICAgICogQHBhcmFtIHtBbmFseXNlck5vZGV9IGFuYWx5c2VyIC0gV2ViIEF1ZGlvIGFuYWx5emVyIG5vZGUgdG8gdXNlXHJcbiAgICAgKi9cclxuICAgIGNvbm5lY3RFeHRlcm5hbEFuYWx5c2VyKGFuYWx5c2VyKSB7XHJcbiAgICAgIHRoaXMuYW5hbHlzZXIgPSBhbmFseXNlcjtcclxuICAgICAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZCBleHRlcm5hbCBhbmFseXplcicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgdm9sdW1lIG9mIHRoZSBhdWRpbyBvdXRwdXRcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2b2x1bWUgLSBWb2x1bWUgbGV2ZWwgYmV0d2VlbiAwIGFuZCAxXHJcbiAgICAgKi9cclxuICAgIHNldFZvbHVtZSh2b2x1bWUpIHtcclxuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0YXRlXHJcbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgIFxyXG4gICAgICAvLyBVc2UgYSBtb3JlIG1vZGVyYXRlIHNjYWxpbmcgY3VydmUgLSBzcXVhcmUgcm9vdCBmb3IgbW9yZSBhdWRpYmxlIHJhbmdlIGF0IGxvdyB2b2x1bWVzXHJcbiAgICAgIC8vIFRoaXMgbWFrZXMgbG93ZXIgdm9sdW1lIHNldHRpbmdzIG1vcmUgdXNhYmxlIHdoaWxlIHN0aWxsIHByb3ZpZGluZyBnb29kIGNvbnRyb2xcclxuICAgICAgY29uc3Qgc2NhbGVkVm9sdW1lID0gTWF0aC5zcXJ0KHZvbHVtZSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCB2b2x1bWUgdmFsdWUgZm9yIHJlZmVyZW5jZVxyXG4gICAgICB0aGlzLnZvbHVtZSA9IHZvbHVtZTtcclxuICAgICAgXHJcbiAgICAgIC8vIENhbGwgdGhlIHN0YXRlJ3Mgc2V0Vm9sdW1lIG1ldGhvZCBpZiBhdmFpbGFibGVcclxuICAgICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiB0eXBlb2YgY3VycmVudFN0YXRlLnNldFZvbHVtZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIFRoZSBzdGF0ZSB3aWxsIGhhbmRsZSBhbGwgdm9sdW1lIGltcGxlbWVudGF0aW9uXHJcbiAgICAgICAgLy8gUGFzcyB0aGUgb3JpZ2luYWwgdm9sdW1lLCBub3QgdGhlIHNjYWxlZCB2b2x1bWUsIHRvIGF2b2lkIGRvdWJsZS1zY2FsaW5nXHJcbiAgICAgICAgY3VycmVudFN0YXRlLnNldFZvbHVtZSh2b2x1bWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIExvZyBmb3IgZGVidWdnaW5nXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1ZvbHVtZSBzZXQgdmlhIHN0YXRlIG1ldGhvZDonLCB2b2x1bWUsICdTY2FsZWQgdm9sdW1lIChub3QgdXNlZCk6Jywgc2NhbGVkVm9sdW1lKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBXZSd2ZSBkZWxlZ2F0ZWQgdm9sdW1lIGNvbnRyb2wgdG8gdGhlIHN0YXRlLCBzbyBubyBuZWVkIHRvIGFsc28gZG8gaXQgaGVyZVxyXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgZG91YmxlLWFwcGxpY2F0aW9uIG9mIHZvbHVtZSBjaGFuZ2VzXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBGYWxsYmFjazogSWYgc3RhdGUgZG9lc24ndCBoYXZlIGEgc2V0Vm9sdW1lIG1ldGhvZCwgaGFuZGxlIGl0IGhlcmVcclxuICAgICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUuZ2Fpbk5vZGUpIHtcclxuICAgICAgICAvLyBJZiB0aGUgc3RhdGUgaGFzIGEgZ2FpbiBub2RlLCB1c2UgaXRcclxuICAgICAgICBjdXJyZW50U3RhdGUuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IHZvbHVtZSA9PT0gMCA/IDAgOiBNYXRoLm1heCgwLjAwMDEsIHNjYWxlZFZvbHVtZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1ZvbHVtZSBzZXQgZGlyZWN0bHkgb24gc3RhdGUgZ2FpbiBub2RlOicsIHZvbHVtZSwgJ0FwcGxpZWQgZ2FpbjonLCBjdXJyZW50U3RhdGUuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5nYWluTm9kZSkge1xyXG4gICAgICAgIC8vIFVzZSBvdXIgbG9jYWwgZ2FpbiBub2RlIGFzIGZhbGxiYWNrXHJcbiAgICAgICAgdGhpcy5nYWluTm9kZS5nYWluLnZhbHVlID0gdm9sdW1lID09PSAwID8gMCA6IE1hdGgubWF4KDAuMDAwMSwgc2NhbGVkVm9sdW1lKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnVm9sdW1lIHNldCBvbiBwcm9jZXNzb3IgZ2FpbiBub2RlOicsIHZvbHVtZSwgJ0FwcGxpZWQgZ2FpbjonLCB0aGlzLmdhaW5Ob2RlLmdhaW4udmFsdWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIENyZWF0ZSBhIGdhaW4gbm9kZSBpZiBub25lIGV4aXN0c1xyXG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XHJcbiAgICAgICAgdGhpcy5nYWluTm9kZS5nYWluLnZhbHVlID0gdm9sdW1lID09PSAwID8gMCA6IE1hdGgubWF4KDAuMDAwMSwgc2NhbGVkVm9sdW1lKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDb25uZWN0IHRocm91Z2ggdGhlIHN0YXRlIHN5c3RlbSBpZiBwb3NzaWJsZVxyXG4gICAgICAgIGlmICh0aGlzLmFuYWx5c2VyKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLmFuYWx5c2VyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5hbmFseXNlci5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xyXG4gICAgICAgICAgICB0aGlzLmdhaW5Ob2RlLmNvbm5lY3QodGhpcy5hdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQ3JlYXRlZCBuZXcgZ2FpbiBub2RlIGFuZCBzZXQgdXAgY29ubmVjdGlvbnMnKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2V0dGluZyB1cCBnYWluIG5vZGU6JywgZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdDcmVhdGVkIG5ldyBnYWluIG5vZGUgd2l0aCB2b2x1bWU6Jywgdm9sdW1lLCAnQXBwbGllZCBnYWluOicsIHRoaXMuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmICh0aGlzLmRlYnVnTW9kZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdWb2x1bWUgc2V0IHRvOicsIHZvbHVtZSwgJ1NjYWxlZCB2b2x1bWU6Jywgc2NhbGVkVm9sdW1lKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyB0aGUgaW50ZXJuYWwgYW5hbHl6ZXIgc2V0dGluZ3MgYW5kIHJlY3JlYXRlcyBkYXRhIGJ1ZmZlcnNcclxuICAgICAqIFNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgY2hhbmdpbmcgRkZUIHNpemUgb3Igb3RoZXIgYW5hbHl6ZXIgc2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgdXBkYXRlQW5hbHl6ZXJTZXR0aW5ncygpIHtcclxuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGZmdCBzaXplIGFuZCBzbW9vdGhpbmdcclxuICAgICAgY29uc3QgZmZ0U2l6ZSA9IHRoaXMuYW5hbHlzZXIuZmZ0U2l6ZTtcclxuICAgICAgY29uc3Qgc21vb3RoaW5nVGltZUNvbnN0YW50ID0gdGhpcy5hbmFseXNlci5zbW9vdGhpbmdUaW1lQ29uc3RhbnQ7XHJcbiAgICAgIFxyXG4gICAgICAvLyBTdG9yZSBjdXJyZW50IHZhbHVlcyB0byByZXN0b3JlIGFmdGVyIHNldHVwXHJcbiAgICAgIHRoaXMuZmZ0U2l6ZSA9IGZmdFNpemU7XHJcbiAgICAgIHRoaXMuc21vb3RoaW5nVGltZUNvbnN0YW50ID0gc21vb3RoaW5nVGltZUNvbnN0YW50O1xyXG4gICAgICBcclxuICAgICAgLy8gVXBkYXRlIG91ciBkYXRhIGJ1ZmZlcnMgYWZ0ZXIgYW5hbHl6ZXIgc2V0dGluZ3MgY2hhbmdlXHJcbiAgICAgIHRoaXMuZnJlcXVlbmN5QmluQ291bnQgPSB0aGlzLmFuYWx5c2VyLmZyZXF1ZW5jeUJpbkNvdW50O1xyXG4gICAgICB0aGlzLmZyZXF1ZW5jeURhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuZnJlcXVlbmN5QmluQ291bnQpO1xyXG4gICAgICB0aGlzLnRpbWVEb21haW5EYXRhID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLmZyZXF1ZW5jeUJpbkNvdW50KTtcclxuICAgICAgXHJcbiAgICAgIC8vIFJlY3JlYXRlIHRleHR1cmVzIHdpdGggbmV3IHNpemVcclxuICAgICAgaWYgKHRoaXMuZnJlcXVlbmN5RGF0YVRleHR1cmUpIHtcclxuICAgICAgICB0aGlzLmZyZXF1ZW5jeURhdGFUZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy50aW1lRG9tYWluRGF0YVRleHR1cmUpIHtcclxuICAgICAgICB0aGlzLnRpbWVEb21haW5EYXRhVGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHRoaXMuZnJlcXVlbmN5RGF0YVRleHR1cmUgPSB0aGlzLmNyZWF0ZURhdGFUZXh0dXJlKHRoaXMuZnJlcXVlbmN5RGF0YSk7XHJcbiAgICAgIHRoaXMudGltZURvbWFpbkRhdGFUZXh0dXJlID0gdGhpcy5jcmVhdGVEYXRhVGV4dHVyZSh0aGlzLnRpbWVEb21haW5EYXRhKTtcclxuICAgICAgXHJcbiAgICAgIGlmICh0aGlzLmRlYnVnTW9kZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBBbmFseXplciBzZXR0aW5ncyB1cGRhdGVkOiBmZnRTaXplPSR7ZmZ0U2l6ZX0sIHNtb290aGluZz0ke3Ntb290aGluZ1RpbWVDb25zdGFudH1gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBGRlQgc2l6ZSBmb3IgZnJlcXVlbmN5IGFuYWx5c2lzXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIE11c3QgYmUgYSBwb3dlciBvZiAyIGJldHdlZW4gMzIgYW5kIDMyNzY4XHJcbiAgICAgKi9cclxuICAgIHNldEZGVFNpemUoc2l6ZSkge1xyXG4gICAgICAvLyBFbnN1cmUgc2l6ZSBpcyBhIHZhbGlkIEZGVCBzaXplIChwb3dlciBvZiAyKVxyXG4gICAgICBjb25zdCB2YWxpZFNpemVzID0gWzMyLCA2NCwgMTI4LCAyNTYsIDUxMiwgMTAyNCwgMjA0OCwgNDA5NiwgODE5MiwgMTYzODQsIDMyNzY4XTtcclxuICAgICAgaWYgKCF2YWxpZFNpemVzLmluY2x1ZGVzKHNpemUpKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRkZUIHNpemUgbXVzdCBiZSBhIHBvd2VyIG9mIDIgYmV0d2VlbiAzMiBhbmQgMzI3NjgnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFNldCB0aGUgc2l6ZSBvbiB0aGUgYW5hbHl6ZXJcclxuICAgICAgdGhpcy5hbmFseXNlci5mZnRTaXplID0gc2l6ZTtcclxuICAgICAgXHJcbiAgICAgIC8vIFVwZGF0ZSBvdXIgYnVmZmVycyBhbmQgdGV4dHVyZXNcclxuICAgICAgdGhpcy51cGRhdGVBbmFseXplclNldHRpbmdzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgZ2V0RnJlcXVlbmN5RGF0YVRleHR1cmUoKSBhbmQgZ2V0VGltZURvbWFpbkRhdGFUZXh0dXJlKCkgaW5zdGVhZFxyXG4gICAgICovXHJcbiAgICByZWNvbm5lY3RBbmFseXplcihjb25uZWN0VG9PdXRwdXQgPSB0cnVlKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybigncmVjb25uZWN0QW5hbHl6ZXIoKSBpcyBkZXByZWNhdGVkIGFzIGl0IG1heSBpbnRlcmZlcmUgd2l0aCBzdGF0ZSBtYW5hZ2VtZW50Jyk7XHJcbiAgICAgIC8vIExlZ2FjeSBpbXBsZW1lbnRhdGlvbiBtYWludGFpbmVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGhpcy5hbmFseXNlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGNvbm5lY3RUb091dHB1dCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMuZ2Fpbk5vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmFseXNlci5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xyXG4gICAgICAgICAgICB0aGlzLmdhaW5Ob2RlLmNvbm5lY3QodGhpcy5hdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hbmFseXNlci5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiByZWNvbm5lY3RBbmFseXplcjonLCBlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBzdGF0ZSBwYXR0ZXJuIG1ldGhvZHMgaW5zdGVhZFxyXG4gICAgICovXHJcbiAgICBzZXR1cEFuYWx5c2VyKCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ3NldHVwQW5hbHlzZXIoKSBpcyBkZXByZWNhdGVkIGFzIGl0IG1heSBpbnRlcmZlcmUgd2l0aCBzdGF0ZSBtYW5hZ2VtZW50Jyk7XHJcbiAgICAgIHRoaXMudXBkYXRlQW5hbHl6ZXJTZXR0aW5ncygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHVwZGF0ZUFuYWx5emVyU2V0dGluZ3MoKSBpbnN0ZWFkXHJcbiAgICAgKi9cclxuICAgIGVuc3VyZUF1ZGlvQ29udGV4dCgpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdlbnN1cmVBdWRpb0NvbnRleHQoKSBpcyBkZXByZWNhdGVkLiBVc2UgdXBkYXRlQW5hbHl6ZXJTZXR0aW5ncygpIGluc3RlYWQnKTtcclxuICAgICAgLy8gRm9yd2FyZCB0byBwbGF5KCkgd2hpY2ggaGFuZGxlcyByZXN1bWluZyB0aGUgQXVkaW9Db250ZXh0XHJcbiAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3ZlcnJpZGUgdGhlIGJhc2UgY2xhc3MgZ2V0RnJlcXVlbmN5RGF0YUZvckFQSSBtZXRob2QgdG8gdXNlIG91ciBGbG9hdDMyIGRhdGFcclxuICAgICAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBOb3JtYWxpemVkIGZyZXF1ZW5jeSBkYXRhIGluIDAtMjU1IHJhbmdlXHJcbiAgICAgKi9cclxuICAgIGdldEZyZXF1ZW5jeURhdGFGb3JBUEkoKSB7XHJcbiAgICAgIC8vIFVwZGF0ZSBvdXIgRmxvYXQzMiBkYXRhIGZpcnN0XHJcbiAgICAgIHRoaXMuYW5hbHlzZXIuZ2V0RmxvYXRGcmVxdWVuY3lEYXRhKHRoaXMuZnJlcXVlbmN5RGF0YSk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBUaGVuIGNvbnZlcnQgdG8gVWludDhBcnJheSBmb3JtYXQgZm9yIEFQSSBjb21wYXRpYmlsaXR5XHJcbiAgICAgIGNvbnN0IHVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheSh0aGlzLmZyZXF1ZW5jeUJpbkNvdW50KTtcclxuICAgICAgdGhpcy5fbm9ybWFsaXplRnJlcXVlbmN5RGF0YSh0aGlzLmZyZXF1ZW5jeURhdGEsIHVpbnQ4QXJyYXkpO1xyXG4gICAgICBcclxuICAgICAgaWYgKHRoaXMuZGVidWdNb2RlICYmIHVpbnQ4QXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ29udmVydGVkIGZyZXF1ZW5jeSBkYXRhIHNhbXBsZTpcIiwgXHJcbiAgICAgICAgICBBcnJheS5mcm9tKHVpbnQ4QXJyYXkuc2xpY2UoMCwgNSkpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHVpbnQ4QXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPdmVycmlkZSB0aGUgYmFzZSBjbGFzcyBnZXRUaW1lRG9tYWluRGF0YUZvckFQSSBtZXRob2QgdG8gdXNlIG91ciBGbG9hdDMyIGRhdGFcclxuICAgICAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBOb3JtYWxpemVkIHRpbWUgZG9tYWluIGRhdGEgaW4gMC0yNTUgcmFuZ2VcclxuICAgICAqL1xyXG4gICAgZ2V0VGltZURvbWFpbkRhdGFGb3JBUEkoKSB7XHJcbiAgICAgIC8vIFVwZGF0ZSBvdXIgRmxvYXQzMiBkYXRhIGZpcnN0XHJcbiAgICAgIHRoaXMuYW5hbHlzZXIuZ2V0RmxvYXRUaW1lRG9tYWluRGF0YSh0aGlzLnRpbWVEb21haW5EYXRhKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFRoZW4gY29udmVydCB0byBVaW50OEFycmF5IGZvcm1hdCBmb3IgQVBJIGNvbXBhdGliaWxpdHlcclxuICAgICAgY29uc3QgdWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KHRoaXMuZnJlcXVlbmN5QmluQ291bnQpO1xyXG4gICAgICB0aGlzLl9ub3JtYWxpemVUaW1lRG9tYWluRGF0YSh0aGlzLnRpbWVEb21haW5EYXRhLCB1aW50OEFycmF5KTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB1aW50OEFycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIG5vcm1hbGl6ZSBmcmVxdWVuY3kgZGF0YSBmcm9tIGRCICgtMTAwIHRvIDApIHRvIDAtMjU1IHJhbmdlXHJcbiAgICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gc291cmNlRGF0YSAtIFJhdyBmcmVxdWVuY3kgZGF0YSAodHlwaWNhbGx5IC0xMDAgdG8gMCBkQilcclxuICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gdGFyZ2V0QXJyYXkgLSBUYXJnZXQgYXJyYXkgZm9yIG5vcm1hbGl6ZWQgdmFsdWVzXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfbm9ybWFsaXplRnJlcXVlbmN5RGF0YShzb3VyY2VEYXRhLCB0YXJnZXRBcnJheSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZnJlcXVlbmN5QmluQ291bnQ7IGkrKykge1xyXG4gICAgICAgIC8vIEZyZXF1ZW5jeSBkYXRhIGlzIHR5cGljYWxseSBpbiAtMTAwIHRvIDAgZEIgcmFuZ2VcclxuICAgICAgICAvLyBNYXAgdG8gMC0yNTUgcmFuZ2UsIHdoZXJlIC0xMDBkQiA9IDAgYW5kIDBkQiA9IDI1NVxyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRWYWx1ZSA9IChzb3VyY2VEYXRhW2ldICsgMTAwKSAvIDEwMDtcclxuICAgICAgICB0YXJnZXRBcnJheVtpXSA9IE1hdGguZmxvb3IoTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBub3JtYWxpemVkVmFsdWUgKiAyNTUpKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBub3JtYWxpemUgdGltZSBkb21haW4gZGF0YSBmcm9tIC0xLDEgdG8gMC0yNTUgcmFuZ2VcclxuICAgICAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSBzb3VyY2VEYXRhIC0gUmF3IHRpbWUgZG9tYWluIGRhdGEgKC0xIHRvIDEpXHJcbiAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHRhcmdldEFycmF5IC0gVGFyZ2V0IGFycmF5IGZvciBub3JtYWxpemVkIHZhbHVlc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX25vcm1hbGl6ZVRpbWVEb21haW5EYXRhKHNvdXJjZURhdGEsIHRhcmdldEFycmF5KSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mcmVxdWVuY3lCaW5Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgLy8gVGltZSBkb21haW4gZGF0YSBpcyBpbiAtMSB0byAxIHJhbmdlXHJcbiAgICAgICAgLy8gTWFwIC0xLjAgdG8gMS4wIHRvIDAtMjU1IHJhbmdlXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlID0gKHNvdXJjZURhdGFbaV0gKyAxKSAvIDI7XHJcbiAgICAgICAgdGFyZ2V0QXJyYXlbaV0gPSBNYXRoLmZsb29yKE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgbm9ybWFsaXplZFZhbHVlICogMjU1KSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyBtb2NrIGRhdGEgZm9yIHRlc3RpbmdcclxuICAgICAqIE92ZXJyaWRlcyBiYXNlIGNsYXNzIG1ldGhvZFxyXG4gICAgICovXHJcbiAgICBpbml0TW9ja0RhdGEoKSB7XHJcbiAgICAgIC8vIENhbGwgdGhlIGJhc2UgY2xhc3MgaW1wbGVtZW50YXRpb25cclxuICAgICAgc3VwZXIuaW5pdE1vY2tEYXRhKCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBVcGRhdGUgb3VyIEdQVSB0ZXh0dXJlc1xyXG4gICAgICB0aGlzLnVwZGF0ZVRleHR1cmVEYXRhKCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAodGhpcy5kZWJ1Z01vZGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnR1BVLWVuaGFuY2VkIG1vY2sgZGF0YSBpbml0aWFsaXplZCcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOlsiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiYXJnIiwiY2FsbCIsImgiLCJsIiwiZiIsInMiLCJ5IiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJkIiwiZ2V0UHJvdG90eXBlT2YiLCJ2IiwidmFsdWVzIiwiZyIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfbmV4dCIsIl90aHJvdyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJfdG9QcmltaXRpdmUiLCJ0b1ByaW1pdGl2ZSIsIlN0cmluZyIsIk51bWJlciIsIl9jYWxsU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiQm9vbGVhbiIsInZhbHVlT2YiLCJfc3VwZXJQcm9wR2V0IiwiX2dldCIsImdldCIsImJpbmQiLCJfc3VwZXJQcm9wQmFzZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9pbmhlcml0cyIsIl9zZXRQcm90b3R5cGVPZiIsIkF1ZGlvUHJvY2Vzc29yIiwiR1BVQXVkaW9Qcm9jZXNzb3IiLCJfQXVkaW9Qcm9jZXNzb3IiLCJfdGhpcyIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJhdWRpb0N0eCIsImF1ZGlvQ29udGV4dCIsImFuYWx5c2VyIiwiZmZ0U2l6ZSIsInNtb290aGluZ1RpbWVDb25zdGFudCIsImZyZXF1ZW5jeUJpbkNvdW50IiwiZnJlcXVlbmN5RGF0YSIsIkZsb2F0MzJBcnJheSIsInRpbWVEb21haW5EYXRhIiwiZGVidWdNb2RlIiwiZnJlcXVlbmN5RGF0YVRleHR1cmUiLCJjcmVhdGVEYXRhVGV4dHVyZSIsInRpbWVEb21haW5EYXRhVGV4dHVyZSIsImRhdGEiLCJ0ZXh0dXJlIiwiVEhSRUUiLCJEYXRhVGV4dHVyZSIsIlJlZEZvcm1hdCIsIkZsb2F0VHlwZSIsIm5lZWRzVXBkYXRlIiwidXBkYXRlVGV4dHVyZURhdGEiLCJnZXRGbG9hdEZyZXF1ZW5jeURhdGEiLCJnZXRGbG9hdFRpbWVEb21haW5EYXRhIiwiX2luaXRNaWNyb3Bob25lIiwiX2NhbGxlZSIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJjb25zb2xlIiwibG9nIiwiaW5pdE1pY3JvcGhvbmUiLCJfaW5pdEZpbGUiLCJfY2FsbGVlMiIsImZpbGUiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJpbml0RmlsZSIsIl94IiwiX2luaXRGcm9tVXJsIiwiX2NhbGxlZTMiLCJ1cmwiLCJyZXNwb25zZSIsImFycmF5QnVmZmVyIiwiYXVkaW9CdWZmZXIiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJmZXRjaCIsIm9rIiwiY29uY2F0Iiwic3RhdHVzIiwiZGVjb2RlQXVkaW9EYXRhIiwiRmlsZSIsInQwIiwiZXJyb3IiLCJpbml0RnJvbVVybCIsIl94MiIsImZpbGwiLCJfcGF1c2UiLCJfY2FsbGVlNCIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NCIsInBhdXNlIiwiX3BsYXkiLCJfY2FsbGVlNSIsIl9jYWxsZWU1JCIsIl9jb250ZXh0NSIsInBsYXkiLCJzdG9wQ3VycmVudFNvdXJjZSIsIndhcm4iLCJwYXVzZUN1cnJlbnRTb3VyY2UiLCJyZXN1bWVDdXJyZW50U291cmNlIiwiZ2V0RnJlcXVlbmN5RGF0YSIsImdldFRpbWVEb21haW5EYXRhIiwiZ2V0RnJlcXVlbmN5RGF0YVRleHR1cmUiLCJnZXRUaW1lRG9tYWluRGF0YVRleHR1cmUiLCJkaXNwb3NlIiwiY29ubmVjdEV4dGVybmFsQW5hbHlzZXIiLCJzZXRWb2x1bWUiLCJ2b2x1bWUiLCJjdXJyZW50U3RhdGUiLCJzdGF0ZSIsInNjYWxlZFZvbHVtZSIsIk1hdGgiLCJzcXJ0IiwiZ2Fpbk5vZGUiLCJnYWluIiwibWF4IiwiY3JlYXRlR2FpbiIsImRpc2Nvbm5lY3QiLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJ1cGRhdGVBbmFseXplclNldHRpbmdzIiwic2V0RkZUU2l6ZSIsInNpemUiLCJ2YWxpZFNpemVzIiwiaW5jbHVkZXMiLCJyZWNvbm5lY3RBbmFseXplciIsImNvbm5lY3RUb091dHB1dCIsInNldHVwQW5hbHlzZXIiLCJlbnN1cmVBdWRpb0NvbnRleHQiLCJnZXRGcmVxdWVuY3lEYXRhRm9yQVBJIiwidWludDhBcnJheSIsIlVpbnQ4QXJyYXkiLCJfbm9ybWFsaXplRnJlcXVlbmN5RGF0YSIsIkFycmF5IiwiZnJvbSIsImdldFRpbWVEb21haW5EYXRhRm9yQVBJIiwiX25vcm1hbGl6ZVRpbWVEb21haW5EYXRhIiwic291cmNlRGF0YSIsInRhcmdldEFycmF5Iiwibm9ybWFsaXplZFZhbHVlIiwiZmxvb3IiLCJtaW4iLCJpbml0TW9ja0RhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/audio/GPUAudioProcessor.js\n");

/***/ }),

/***/ "./src/scripts/audio/InitializedState.js":
/*!***********************************************!*\
  !*** ./src/scripts/audio/InitializedState.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InitializedState: () => (/* binding */ InitializedState)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Remove the circular imports at the top\n// import { FileState } from \"./FileState.js\";\n// import { MicrophoneState } from \"./MicrophoneState.js\";\n// import { NetworkStreamState } from \"./NetworkStreamState.js\";\n\n/**\r\n * Base audio state that handles common functionality and state transitions.\r\n * All specific audio state implementations should extend this class.\r\n */\nvar InitializedState = /*#__PURE__*/function () {\n  function InitializedState(audioContext, analyser) {\n    _classCallCheck(this, InitializedState);\n    this.audioContext = audioContext;\n    this.analyser = analyser;\n    this.source = null;\n\n    // Create a gain node by default for all audio states\n    this.gainNode = this.audioContext.createGain();\n    // Default to full volume\n    this.gainNode.gain.value = 1.0;\n\n    // Connect analyzer to gain node by default\n    // Child classes should use this.gainNode in their setup\n    try {\n      this.analyser.connect(this.gainNode);\n      this.gainNode.connect(this.audioContext.destination);\n    } catch (e) {\n      console.error('Error setting up default gain node:', e);\n    }\n  }\n\n  /**\r\n   * Sets the volume for this audio state\r\n   * @param {number} volume - Volume level between 0 and 1\r\n   */\n  return _createClass(InitializedState, [{\n    key: \"setVolume\",\n    value: function setVolume(volume) {\n      if (!this.gainNode) {\n        this.gainNode = this.audioContext.createGain();\n        try {\n          // Reconnect if needed\n          this.analyser.connect(this.gainNode);\n          this.gainNode.connect(this.audioContext.destination);\n        } catch (e) {\n          console.error('Error setting up gain node in setVolume:', e);\n        }\n      }\n\n      // Use square root scaling for more natural volume control\n      // This gives more audible range at low volume settings, while still allowing for fine control\n      var scaledVolume = Math.sqrt(volume);\n\n      // Set the gain value - ensure 0 is actually 0, otherwise use scaled value\n      this.gainNode.gain.value = volume === 0 ? 0 : scaledVolume;\n      console.log('Base state volume set to:', volume, 'Scaled volume:', scaledVolume);\n    }\n\n    /**\r\n     * Initializes microphone input\r\n     * @returns {Promise<MicrophoneState>} Promise that resolves to new state\r\n     */\n  }, {\n    key: \"initMicrophone\",\n    value: (function () {\n      var _initMicrophone = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var stream, source, _yield$import, MicrophoneState;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return navigator.mediaDevices.getUserMedia({\n                audio: true\n              });\n            case 3:\n              stream = _context.sent;\n              source = this.audioContext.createMediaStreamSource(stream);\n              source.connect(this.analyser);\n\n              // Use dynamic import to avoid circular dependency\n              _context.next = 8;\n              return __webpack_require__.e(/*! import() */ \"src_scripts_audio_MicrophoneState_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./MicrophoneState.js */ \"./src/scripts/audio/MicrophoneState.js\"));\n            case 8:\n              _yield$import = _context.sent;\n              MicrophoneState = _yield$import.MicrophoneState;\n              return _context.abrupt(\"return\", new MicrophoneState(this.audioContext, this.analyser, source, stream));\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error accessing microphone:\", _context.t0);\n              return _context.abrupt(\"return\", this);\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 13]]);\n      }));\n      function initMicrophone() {\n        return _initMicrophone.apply(this, arguments);\n      }\n      return initMicrophone;\n    }()\n    /**\r\n     * Initializes audio from a file\r\n     * @param {File} file - The audio file to play\r\n     * @returns {Promise<FileState>} Promise that resolves to new state\r\n     */\n    )\n  }, {\n    key: \"initFile\",\n    value: (function () {\n      var _initFile = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(file) {\n        var arrayBuffer, audioBuffer, _yield$import2, FileState;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return file.arrayBuffer();\n            case 3:\n              arrayBuffer = _context2.sent;\n              _context2.next = 6;\n              return this.audioContext.decodeAudioData(arrayBuffer);\n            case 6:\n              audioBuffer = _context2.sent;\n              _context2.next = 9;\n              return __webpack_require__.e(/*! import() */ \"src_scripts_audio_FileState_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./FileState.js */ \"./src/scripts/audio/FileState.js\"));\n            case 9:\n              _yield$import2 = _context2.sent;\n              FileState = _yield$import2.FileState;\n              return _context2.abrupt(\"return\", new FileState(this.audioContext, this.analyser, audioBuffer));\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(\"Error loading audio file:\", _context2.t0);\n              return _context2.abrupt(\"return\", this);\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 14]]);\n      }));\n      function initFile(_x) {\n        return _initFile.apply(this, arguments);\n      }\n      return initFile;\n    }()\n    /**\r\n     * Initializes audio from a network stream\r\n     * @param {string} streamUrl - URL of the stream to play\r\n     * @returns {Promise<NetworkStreamState>} Promise that resolves to new state\r\n     */\n    )\n  }, {\n    key: \"initNetworkStream\",\n    value: (function () {\n      var _initNetworkStream = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(streamUrl) {\n        var _yield$import3, NetworkStreamState;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return __webpack_require__.e(/*! import() */ \"src_scripts_audio_NetworkStreamState_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./NetworkStreamState.js */ \"./src/scripts/audio/NetworkStreamState.js\"));\n            case 3:\n              _yield$import3 = _context3.sent;\n              NetworkStreamState = _yield$import3.NetworkStreamState;\n              return _context3.abrupt(\"return\", new NetworkStreamState(this.audioContext, this.analyser, streamUrl));\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"Error initializing network stream:\", _context3.t0);\n              return _context3.abrupt(\"return\", this);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 8]]);\n      }));\n      function initNetworkStream(_x2) {\n        return _initNetworkStream.apply(this, arguments);\n      }\n      return initNetworkStream;\n    }()\n    /**\r\n     * Creates mock audio data for testing\r\n     * @returns {InitializedState} This state with mock data\r\n     */\n    )\n  }, {\n    key: \"initMockData\",\n    value: function initMockData() {\n      // Clean up current source if it exists\n      this.stop();\n      this.source = this.audioContext.createBufferSource();\n      var buffer = this.audioContext.createBuffer(1, this.audioContext.sampleRate * 3, this.audioContext.sampleRate);\n      var data = buffer.getChannelData(0);\n\n      // Generate mock data (e.g., sine wave or random data)\n      for (var i = 0; i < data.length; i++) {\n        data[i] = Math.random() * 2 - 1; // Random data between -1 and 1\n      }\n      this.source.buffer = buffer;\n      this.source.loop = true;\n      this.source.connect(this.analyser);\n      this.source.start();\n      console.log(\"Mock data initialized\");\n      return this;\n    }\n\n    /**\r\n     * Stops and cleans up the current audio source\r\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.source) {\n        this.source.disconnect();\n        if (this.source.stop) {\n          this.source.stop(0);\n        }\n        this.source = null;\n        console.log(\"Audio source stopped\");\n      }\n    }\n\n    /**\r\n     * Gets frequency data from the analyzer\r\n     * @param {Uint8Array} dataArray - Array to store frequency data\r\n     */\n  }, {\n    key: \"getFrequencyData\",\n    value: function getFrequencyData(dataArray) {\n      this.analyser.getByteFrequencyData(dataArray);\n    }\n\n    /**\r\n     * Gets time domain data from the analyzer\r\n     * @param {Uint8Array} dataArray - Array to store time domain data\r\n     */\n  }, {\n    key: \"getTimeDomainData\",\n    value: function getTimeDomainData(dataArray) {\n      this.analyser.getByteTimeDomainData(dataArray);\n    }\n  }]);\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/audio/InitializedState.js\n");

/***/ }),

/***/ "./src/scripts/utils/pathResolver.js":
/*!*******************************************!*\
  !*** ./src/scripts/utils/pathResolver.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   resolveAssetPath: () => (/* binding */ resolveAssetPath),\n/* harmony export */   resolvePath: () => (/* binding */ resolvePath)\n/* harmony export */ });\n/**\r\n * Path resolver utility for managing URLs in development and production\r\n * Helps with resolving correct paths for assets and pages\r\n */\n\n/**\r\n * Resolves a relative path to handle both development and production environments\r\n * In development, might need to handle paths differently than in production\r\n * \r\n * @param {string} path - The relative path to resolve\r\n * @returns {string} - The resolved path\r\n */\nfunction resolvePath(path) {\n  // Remove leading slash if it exists\n  if (path.startsWith('/')) {\n    path = path.substring(1);\n  }\n\n  // In production, paths will be relative to the root\n  // In development with webpack-dev-server, paths are also relative to root\n  // This function could be expanded to handle CDN paths or other scenarios\n\n  return path;\n}\n\n/**\r\n * Resolves an asset path (images, sounds, etc)\r\n * \r\n * @param {string} path - The relative path to the asset\r\n * @returns {string} - The resolved asset path\r\n */\nfunction resolveAssetPath(path) {\n  // For assets, we may want different handling\n  return 'assets/' + path.replace(/^assets\\//, '');\n}\n\n/**\r\n * Detects if the app is running in development or production mode\r\n * \r\n * @returns {boolean} - True if running in development\r\n */\nfunction isDevelopment() {\n  // Check if webpack's development flag is set\n  // For webpack 5, we need to check if the process object exists first\n  try {\n    // This will be replaced by webpack's DefinePlugin\n    return typeof process !== 'undefined' && {\"WEBPACK_BUNDLE\":true,\"WEBPACK_BUILD\":true,\"NODE_ENV\":\"development\"} && \"development\" !== 'production';\n  } catch (e) {\n    // If process is not defined (or some other error), assume development\n    return true;\n  }\n}\n\n// Export a default object with all utilities\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  resolvePath: resolvePath,\n  resolveAssetPath: resolveAssetPath,\n  isDevelopment: isDevelopment\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy91dGlscy9wYXRoUmVzb2x2ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0EsV0FBV0EsQ0FBQ0MsSUFBSSxFQUFFO0VBQ2hDO0VBQ0EsSUFBSUEsSUFBSSxDQUFDQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7SUFDeEJELElBQUksR0FBR0EsSUFBSSxDQUFDRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQzFCOztFQUVBO0VBQ0E7RUFDQTs7RUFFQSxPQUFPRixJQUFJO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0csZ0JBQWdCQSxDQUFDSCxJQUFJLEVBQUU7RUFDckM7RUFDQSxPQUFPLFNBQVMsR0FBR0EsSUFBSSxDQUFDSSxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsYUFBYUEsQ0FBQSxFQUFHO0VBQzlCO0VBQ0E7RUFDQSxJQUFJO0lBQ0Y7SUFDQSxPQUFPLE9BQU9DLE9BQU8sS0FBSyxXQUFXLElBQUlBLHFFQUFXLElBQUlBLGFBQW9CLEtBQUssWUFBWTtFQUMvRixDQUFDLENBQUMsT0FBT0csQ0FBQyxFQUFFO0lBQ1Y7SUFDQSxPQUFPLElBQUk7RUFDYjtBQUNGOztBQUVBO0FBQ0EsaUVBQWU7RUFDYlYsV0FBVyxFQUFYQSxXQUFXO0VBQ1hJLGdCQUFnQixFQUFoQkEsZ0JBQWdCO0VBQ2hCRSxhQUFhLEVBQWJBO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JldmVyYi14ci8uL3NyYy9zY3JpcHRzL3V0aWxzL3BhdGhSZXNvbHZlci5qcz9kNGNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBQYXRoIHJlc29sdmVyIHV0aWxpdHkgZm9yIG1hbmFnaW5nIFVSTHMgaW4gZGV2ZWxvcG1lbnQgYW5kIHByb2R1Y3Rpb25cclxuICogSGVscHMgd2l0aCByZXNvbHZpbmcgY29ycmVjdCBwYXRocyBmb3IgYXNzZXRzIGFuZCBwYWdlc1xyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZXNvbHZlcyBhIHJlbGF0aXZlIHBhdGggdG8gaGFuZGxlIGJvdGggZGV2ZWxvcG1lbnQgYW5kIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXHJcbiAqIEluIGRldmVsb3BtZW50LCBtaWdodCBuZWVkIHRvIGhhbmRsZSBwYXRocyBkaWZmZXJlbnRseSB0aGFuIGluIHByb2R1Y3Rpb25cclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHJlbGF0aXZlIHBhdGggdG8gcmVzb2x2ZVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIFRoZSByZXNvbHZlZCBwYXRoXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVBhdGgocGF0aCkge1xyXG4gIC8vIFJlbW92ZSBsZWFkaW5nIHNsYXNoIGlmIGl0IGV4aXN0c1xyXG4gIGlmIChwYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKDEpO1xyXG4gIH1cclxuXHJcbiAgLy8gSW4gcHJvZHVjdGlvbiwgcGF0aHMgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGUgcm9vdFxyXG4gIC8vIEluIGRldmVsb3BtZW50IHdpdGggd2VicGFjay1kZXYtc2VydmVyLCBwYXRocyBhcmUgYWxzbyByZWxhdGl2ZSB0byByb290XHJcbiAgLy8gVGhpcyBmdW5jdGlvbiBjb3VsZCBiZSBleHBhbmRlZCB0byBoYW5kbGUgQ0ROIHBhdGhzIG9yIG90aGVyIHNjZW5hcmlvc1xyXG4gIFxyXG4gIHJldHVybiBwYXRoO1xyXG59XHJcblxyXG4vKipcclxuICogUmVzb2x2ZXMgYW4gYXNzZXQgcGF0aCAoaW1hZ2VzLCBzb3VuZHMsIGV0YylcclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHJlbGF0aXZlIHBhdGggdG8gdGhlIGFzc2V0XHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIHJlc29sdmVkIGFzc2V0IHBhdGhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQXNzZXRQYXRoKHBhdGgpIHtcclxuICAvLyBGb3IgYXNzZXRzLCB3ZSBtYXkgd2FudCBkaWZmZXJlbnQgaGFuZGxpbmdcclxuICByZXR1cm4gJ2Fzc2V0cy8nICsgcGF0aC5yZXBsYWNlKC9eYXNzZXRzXFwvLywgJycpO1xyXG59XHJcblxyXG4vKipcclxuICogRGV0ZWN0cyBpZiB0aGUgYXBwIGlzIHJ1bm5pbmcgaW4gZGV2ZWxvcG1lbnQgb3IgcHJvZHVjdGlvbiBtb2RlXHJcbiAqIFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUcnVlIGlmIHJ1bm5pbmcgaW4gZGV2ZWxvcG1lbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0RldmVsb3BtZW50KCkge1xyXG4gIC8vIENoZWNrIGlmIHdlYnBhY2sncyBkZXZlbG9wbWVudCBmbGFnIGlzIHNldFxyXG4gIC8vIEZvciB3ZWJwYWNrIDUsIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHByb2Nlc3Mgb2JqZWN0IGV4aXN0cyBmaXJzdFxyXG4gIHRyeSB7XHJcbiAgICAvLyBUaGlzIHdpbGwgYmUgcmVwbGFjZWQgYnkgd2VicGFjaydzIERlZmluZVBsdWdpblxyXG4gICAgcmV0dXJuIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIC8vIElmIHByb2Nlc3MgaXMgbm90IGRlZmluZWQgKG9yIHNvbWUgb3RoZXIgZXJyb3IpLCBhc3N1bWUgZGV2ZWxvcG1lbnRcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG5cclxuLy8gRXhwb3J0IGEgZGVmYXVsdCBvYmplY3Qgd2l0aCBhbGwgdXRpbGl0aWVzXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICByZXNvbHZlUGF0aCxcclxuICByZXNvbHZlQXNzZXRQYXRoLFxyXG4gIGlzRGV2ZWxvcG1lbnRcclxufTsgIl0sIm5hbWVzIjpbInJlc29sdmVQYXRoIiwicGF0aCIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJyZXNvbHZlQXNzZXRQYXRoIiwicmVwbGFjZSIsImlzRGV2ZWxvcG1lbnQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/utils/pathResolver.js\n");

/***/ }),

/***/ "./src/stages/home.js":
/*!****************************!*\
  !*** ./src/stages/home.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_utils_pathResolver_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scripts/utils/pathResolver.js */ \"./src/scripts/utils/pathResolver.js\");\n/* harmony import */ var _scripts_audio_GPUAudioProcessor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scripts/audio/GPUAudioProcessor.js */ \"./src/scripts/audio/GPUAudioProcessor.js\");\n/* harmony import */ var _scripts_audio_AudioProcessor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scripts/audio/AudioProcessor.js */ \"./src/scripts/audio/AudioProcessor.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// Import AFrame if it's not loaded via CDN\n// import 'aframe';\n\n// Import path resolver utility\n\n\n\n\n/**\r\n * Home visualizer entry point\r\n * Handles loading and initializing A-Frame components and communication with parent window\r\n */\ndocument.addEventListener('DOMContentLoaded', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n  var initializeAudioProcessor, _initializeAudioProcessor, handleMessage, toggleElement, updateProcessorData, initializeVisualizers;\n  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        initializeVisualizers = function _initializeVisualizer() {\n          console.log('Initializing visualizers');\n\n          // Initialize audio processor\n          initializeAudioProcessor();\n\n          // Initialize with a small delay to ensure everything is ready\n          setTimeout(function () {\n            // Ensure the wave3 component is properly initialized\n            var wave3Entity = document.getElementById('wave3-visualizer');\n            if (wave3Entity) {\n              if (AFRAME.components['wave3-visualizer']) {\n                try {\n                  // Store the component data \n                  var componentData = wave3Entity.getAttribute('wave3-visualizer');\n\n                  // Remove the component\n                  wave3Entity.removeAttribute('wave3-visualizer');\n\n                  // Add it back after a short delay\n                  setTimeout(function () {\n                    wave3Entity.setAttribute('wave3-visualizer', componentData);\n                    console.log('Wave3 visualizer re-initialized');\n                  }, 300);\n                } catch (error) {\n                  console.error('Error re-initializing wave3 visualizer:', error);\n                }\n              } else {\n                console.error('Wave3 visualizer component not registered!');\n                // Try to register it if available globally\n                if (window.registerWave3Visualizer) {\n                  window.registerWave3Visualizer();\n                }\n              }\n            } else {\n              console.warn('Wave3 visualizer entity not found in the DOM');\n            }\n          }, 500);\n        };\n        updateProcessorData = function _updateProcessorData(type, data) {\n          if (!window.gpuAudioProcessor) return;\n\n          // Map the data to the appropriate texture in the GPU processor\n          if (type === 'frequencyData') {\n            // Convert Uint8Array to Float32Array for GPU processing\n            var floatData = new Float32Array(data.length);\n            for (var i = 0; i < data.length; i++) {\n              // Convert from 0-255 to -100-0 dB range\n              floatData[i] = data[i] / 255.0 * 100.0 - 100.0;\n            }\n\n            // Update frequency data in GPU processor\n            var frequencyData = window.gpuAudioProcessor.getFrequencyData();\n            frequencyData.set(floatData);\n          } else if (type === 'timeDomainData') {\n            // Convert Uint8Array to Float32Array for GPU processing\n            var _floatData = new Float32Array(data.length);\n            for (var _i = 0; _i < data.length; _i++) {\n              // Convert from 0-255 to -1.0-1.0 range\n              _floatData[_i] = data[_i] / 128.0 - 1.0;\n            }\n\n            // Update time domain data in GPU processor\n            var timeDomainData = window.gpuAudioProcessor.getTimeDomainData();\n            timeDomainData.set(_floatData);\n          }\n\n          // Force update on the textures\n          window.gpuAudioProcessor.updateTextureData();\n\n          // Also update the audio-processor entity for components that use the old system\n          var processorEntity = document.getElementById('audio-processor');\n          if (processorEntity) {\n            processorEntity.emit('audiodata-updated', {\n              frequencyData: data,\n              timeDomainData: type === 'frequencyData' ? window.gpuAudioProcessor.getTimeDomainDataForAPI() : data\n            });\n          }\n        };\n        toggleElement = function _toggleElement(elementType, visible) {\n          console.log(\"Toggle \".concat(elementType, \": \").concat(visible));\n          var elements = {\n            wave3: document.querySelector('[wave3-visualizer]'),\n            waveform: document.querySelector('[circular-waveform]'),\n            bars: document.querySelector('[frequency-bars]'),\n            skybox: document.querySelector('a-sky'),\n            lights: Array.from(document.querySelectorAll('a-light')),\n            ground: document.querySelector('#ground-plane')\n          };\n          var element = elements[elementType];\n          if (!element) {\n            console.warn(\"Element \".concat(elementType, \" not found\"));\n            return;\n          }\n          if (Array.isArray(element)) {\n            // Handle arrays of elements (e.g. lights)\n            element.forEach(function (el) {\n              return el.setAttribute('visible', visible);\n            });\n          } else {\n            // Handle single elements\n            element.setAttribute('visible', visible);\n          }\n          console.log(\"Set visibility of \".concat(elementType, \" to \").concat(visible));\n        };\n        handleMessage = function _handleMessage(event) {\n          // Make sure message is from parent window\n          if (event.source !== window.parent) return;\n          var message = event.data;\n\n          // Handle different message types\n          switch (message.type) {\n            case 'frequencyData':\n            case 'timeDomainData':\n              if (window.gpuAudioProcessor) {\n                // Update the audio processor with data from parent\n                updateProcessorData(message.type, message.data);\n              }\n              break;\n            case 'init-audio':\n              // Parent is telling us to initialize audio\n              if (window.gpuAudioProcessor) {\n                // Stop any current processing\n                window.gpuAudioProcessor.stop();\n\n                // Tell the processor entity to use the GPU processor\n                var processorEntity = document.getElementById('audio-processor');\n                processorEntity.gpuAudioProcessor = window.gpuAudioProcessor;\n\n                // Emit event that the processor is ready\n                processorEntity.emit('audio-processor-ready');\n              }\n              break;\n            case 'toggle':\n              // Toggle visibility of visualization elements\n              var elementType = message.element;\n              var visible = message.visible;\n              toggleElement(elementType, visible);\n              break;\n          }\n        };\n        _initializeAudioProcessor = function _initializeAudioProce2() {\n          _initializeAudioProcessor = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  // Create a global reference to the processor\n                  window.gpuAudioProcessor = new _scripts_audio_GPUAudioProcessor_js__WEBPACK_IMPORTED_MODULE_1__.GPUAudioProcessor({\n                    fftSize: 2048,\n                    smoothingTimeConstant: 0.8,\n                    debugMode: true\n                  });\n\n                  // Initialize the audio processor with mock data for testing\n                  // await window.gpuAudioProcessor.initMockData();\n\n                  console.log('GPUAudioProcessor initialized');\n\n                  // Set up communication with parent window\n                  window.addEventListener('message', handleMessage);\n\n                  // Signal to parent that we're ready\n                  window.parent.postMessage({\n                    type: 'visualizer-ready'\n                  }, '*');\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return _initializeAudioProcessor.apply(this, arguments);\n        };\n        initializeAudioProcessor = function _initializeAudioProce() {\n          return _initializeAudioProcessor.apply(this, arguments);\n        };\n        console.log('Home visualizer initializing...');\n\n        // Make path resolver globally available\n        window.resolvePath = _scripts_utils_pathResolver_js__WEBPACK_IMPORTED_MODULE_0__.resolvePath;\n\n        // Wait for A-Frame to be ready before initializing components\n        if (typeof AFRAME !== 'undefined') {\n          initializeVisualizers();\n        } else {\n          console.warn('A-Frame not found. Waiting for it to load...');\n          // Wait for A-Frame to load\n          document.addEventListener('aframe-loaded', initializeVisualizers);\n        }\n\n        /**\r\n         * Initialize the GPU audio processor and set up communication with parent window\r\n         */\n\n        /**\r\n         * Handle messages from parent window\r\n         * @param {MessageEvent} event - Message event from window.postMessage\r\n         */\n\n        /**\r\n         * Toggle visibility of visualization elements\r\n         * @param {string} elementType - Type of element to toggle (waveform, bars, etc.)\r\n         * @param {boolean} visible - Whether the element should be visible\r\n         */\n\n        /**\r\n         * Update processor data with audio data from parent window\r\n         * @param {string} type - Type of data ('frequencyData' or 'timeDomainData')\r\n         * @param {Uint8Array} data - Audio data array\r\n         */\n\n        /**\r\n         * Initialize the visualizers\r\n         */\n\n        // Make functions available globally for HTML to access\n        window.initializeVisualizers = initializeVisualizers;\n        window.handleMessage = handleMessage;\n        window.updateProcessorData = updateProcessorData;\n        window.toggleElement = toggleElement;\n\n        // Track when visualizers are loaded\n        window.visualizersLoaded = true;\n        console.log('Visualizer scripts loaded');\n      case 15:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _callee2);\n})));\n\n// These A-Frame components must be registered outside any function so they're available immediately\n\n// Register circular waveform component if not already registered by imported scripts\nif (typeof AFRAME !== 'undefined' && !AFRAME.components['circular-waveform']) {\n  AFRAME.registerComponent('circular-waveform', {\n    schema: {\n      analyserNode: {\n        type: 'selector'\n      },\n      radius: {\n        type: 'number',\n        \"default\": 5\n      },\n      height: {\n        type: 'number',\n        \"default\": 2\n      },\n      color: {\n        type: 'color',\n        \"default\": '#FFF'\n      },\n      segments: {\n        type: 'int',\n        \"default\": 128\n      }\n    }\n\n    // Component implementation\n    // ...\n  });\n}\n\n// Register frequency bars component if not already registered by imported scripts\nif (typeof AFRAME !== 'undefined' && !AFRAME.components['frequency-bars']) {\n  AFRAME.registerComponent('frequency-bars', {\n    schema: {\n      analyserNode: {\n        type: 'selector'\n      },\n      radius: {\n        type: 'number',\n        \"default\": 8\n      },\n      height: {\n        type: 'number',\n        \"default\": 3\n      },\n      color: {\n        type: 'color',\n        \"default\": '#FFF'\n      },\n      segments: {\n        type: 'int',\n        \"default\": 64\n      },\n      smoothing: {\n        type: 'number',\n        \"default\": 0.8\n      }\n    }\n\n    // Component implementation\n    // ...\n  });\n}\n\n// Add toggle handler component to scene if not already registered by imported scripts\nif (typeof AFRAME !== 'undefined' && !AFRAME.components['toggle-handler']) {\n  AFRAME.registerComponent('toggle-handler', {\n    init: function init() {\n      var _this = this;\n      console.log('Toggle handler initializing...');\n      // Listen for messages from parent window\n      window.addEventListener('message', this.handleMessage.bind(this));\n\n      // Wait for DOM to be fully loaded\n      setTimeout(function () {\n        // Store references to elements\n        _this.elements = {\n          wave3: document.querySelector('[wave3-visualizer]'),\n          waveform: document.querySelector('[circular-waveform]'),\n          bars: document.querySelector('[frequency-bars]'),\n          skybox: document.querySelector('a-sky'),\n          lights: Array.from(document.querySelectorAll('a-light')),\n          ground: document.querySelector('#ground-plane')\n        };\n      }, 500);\n    },\n    // Handle messages from parent\n    handleMessage: function handleMessage(event) {\n      // Use global handler if available, otherwise handle locally\n      if (window.handleMessage) {\n        window.handleMessage(event);\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/stages/home.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "reverb-xr:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"home": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkreverb_xr"] = self["webpackChunkreverb_xr"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/stages/home.js");
/******/ 	
/******/ })()
;